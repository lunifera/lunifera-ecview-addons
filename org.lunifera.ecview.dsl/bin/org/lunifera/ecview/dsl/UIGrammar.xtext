grammar org.lunifera.ecview.dsl.UIGrammar with org.eclipse.xtext.xbase.Xbase

import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/core.ecore" as core
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/datatypes.ecore" as coreDt
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/visibility.ecore" as coreVis
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/binding.ecore" as coreBind
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/validation.ecore" as coreVal
import "platform:/resource/org.eclipse.emf.ecp.ecview.extension.model/model/extension.ecore" as ext
import "platform:/resource/org.eclipse.emf.ecp.ecview.extension.model/model/extdatatypes.ecore" as extDt
import "platform:/resource/org.lunifera.ecview.uisemantics/model/generated/UISemanticsGrammar.ecore" as cfg
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
generate uIGrammar "http://www.lunifera.org/ecview/dsl/UIGrammar"

UiModel:
	viewSet+=ViewSet*;

ViewSet returns core::YViewSet:
	{core::YViewSet}
	'viewset' name=ID
	(('beanslots' '{' (beanSlots+=GBeanSlot)* '}')?
	(views+=View)*);

GBeanSlot returns core::YBeanSlot:
	{GBeanSlot}
	'slot' name=ID ':' jvmType=JvmTypeReference;

View returns core::YView:
	IDEView;

IDEView:
	'ideview' name=ID
	'{'
	(actions+=Action)*
	(layouts+=Layout)*
	(bindings+=Binding)*
	'}';

Action:
	'action' name=ID
	'{'
	body=XExpression
	'}';

GGridLayout returns ext::YGridLayout:
	{GGridLayout}
	'gridlayout'
	('('
	((('columns=' columns=INT)?)
	&
	((fillHorizontal?='fill-h')?)
	&
	((fillVertical?='fill-v')?)
	&
	((spacing?='spacing')?)
	&
	((margin?='margin')?))
	')')?
	name=ID?
	'{'
	(contents+=GGridLayoutAssigment)*
	'}';

GGridLayoutAssigment:
	element=Embeddable (('align' alignment=Alignment)? & ('span' from=Point 'to' to=Point)?);

Point:
	x=INT '/' y=INT;

GridLayoutCellStyle returns ext::YGridLayoutCellStyle:
	{ext::YGridLayoutCellStyle}
	(('target' target=[core::YEmbeddable])?
	&
	('alignment' alignment=Alignment)?
	&
	('spaninfo' spanInfo=SpanInfo)?);

enum Alignment returns ext::YAlignment:
	BOTTOM_LEFT="bottom left" | BOTTOM_CENTER="bottom center" | BOTTOM_RIGHT="bottom right" | BOTTOM_FILL="bottom fill" |
	MIDDLE_LEFT="middle left" | MIDDLE_CENTER="middle center" | MIDDLE_RIGHT="middle right" | BOTTOM_FILL="middle fill" |
	TOP_LEFT="top left" | TOP_CENTER="top center" | TOP_RIGHT="top right" | TOP_FILL="top fill" |
	FILL_LEFT="fill left" | FILL_CENTER="fill center" | FILL_RIGHT="fill RIGHT" | FILL_FILL="fill fill" |
	UNDEFINED="undefined";

SpanInfo returns ext::YSpanInfo:
	{ext::YSpanInfo}
	((('columnFrom' columnFrom=INT)
	&
	('columnTo' columnTo=INT))?
	&
	(('rowFrom' rowFrom=INT)
	&
	('rowTo' rowTo=INT))?);

GTextField returns ext::YTextField:
	{GTextField}
	'textfield' name=ID?
	('{' (('datatype' datatype=[extDt::YTextDatatype])?
	&
	('datadescription' datadescription=[coreDt::YDatadescription])?
	&
	('value' value=ID)?) '}')?;

GTextArea returns ext::YTextArea:
	{GTextArea}
	'textarea' name=ID?
	('{' (('datatype' datatype=[extDt::YTextAreaDatatype])?
	&
	('datadescription' datadescription=[coreDt::YDatadescription])?
	&
	('value' value=ID)?) '}')?;

GTable returns ext::YTable:
	{GTable}
	'table' name=ID?
	'{' (('datatype' datatype=[extDt::YTableDatatype])?
	&
	('datadescription' datadescription=[coreDt::YDatadescription])?
	&
	('selectiontype' selectionType=SelectionType)?
	&
	('type' jvmType=JvmTypeReference)?
	&
	('collection binding endpoint' collectionBindingEndpoint=[core::YEmbeddableCollectionEndpoint])?
	&
	('selection binding endpoint' selectionBindingEndpoint=[core::YEmbeddableSelectionEndpoint])?
	&
	('multi selection binding endpoint' multiSelectionBindingEndpoint=[core::YEmbeddableMultiSelectionEndpoint])?) '}';

GTree returns ext::YTree:
	{GTtree}
	'tree' name=ID?
	'{' (('datatype' datatype=[extDt::YTreeDatatype])?
	&
	('datadescription' datadescription=[coreDt::YDatadescription])?
	&
	('selectiontype' selectionType=SelectionType)?
	&
	('type' jvmType=JvmTypeReference)?
	&
	('collection binding endpoint' collectionBindingEndpoint=[core::YEmbeddableCollectionEndpoint])?
	&
	('selection binding endpoint' selectionBindingEndpoint=[core::YEmbeddableSelectionEndpoint])?
	&
	('multi selection binding endpoint' multiSelectionBindingEndpoint=[core::YEmbeddableMultiSelectionEndpoint])?) '}';

enum SelectionType returns ext::YSelectionType:
	SINGLE="SINGLE" | MULTI="MULTI";

Embeddable returns core::YEmbeddable:
	Layout | Field;

Layout returns core::YLayout:
	GGridLayout;

Field returns core::YField:
	GTextField | GTextArea | GTable | GTree;

Validator returns coreVal::YValidator:
	MaxLengthValidator | MinLengthValidator;

MaxLengthValidator returns coreVal::YValidator:
	{coreVal::YValidator}
	'max';

MinLengthValidator returns coreVal::YValidator:
	{coreVal::YValidator}
	'min';

Binding:
	'bind' embeddable=[core::YEmbeddable] '.' method=[cfg::Binding] 'to';

