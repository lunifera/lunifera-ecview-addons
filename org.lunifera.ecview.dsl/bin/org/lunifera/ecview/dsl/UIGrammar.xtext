grammar org.lunifera.ecview.dsl.UIGrammar with org.eclipse.xtext.xbase.Xbase

import "http://eclipse.org/emf/ecp/ecview/core/view" as core
import "http://eclipse.org/emf/ecp/ecview/core/validation" as coreVal
import "http://eclipse.org/emf/ecp/ecview/extension/view" as ext
import "http://www.lunifera.org/ecview/uisemantics/uisemantics" as cfg
import "http://www.lunifera.org/ecview/dsl/uimodel/core" as grammarCore
import "http://www.lunifera.org/ecview/dsl/uimodel/extension" as ext
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/xbase/Xtype"

UiModel returns grammarCore::UiModel:
	'package' packageName=QualifiedName
	 
	imports+=UiImports*
	roots+=UiRootElements*;

UiImports returns grammarCore::UiImports:
	'import' importedNamespace=QualifiedNameWithWildcard (';')?;

UiRootElements returns grammarCore::UiRootElements:
	UiView | UiViewSet | UiVisibilityProcessorDef | UiVisibilityPropertiesDef;
 
UiVisibilityProcessor returns ext::UiVisibilityProcessor:
	{ext::UiVisibilityProcessor}
	name=ID '{'
	bindingAlias+=UiBindingEndpointAlias*
	changeTrigger+=UiChangeTrigger*
	rule=UiVisibilityRule
	propertiesAssignment=UiVisibilityPropertiesAssignment
	'}';
	
UiVisibilityProcessorDef returns ext::UiVisibilityProcessorDef:
	'visibilityProcessor' processor=UiVisibilityProcessor;

UiVisibilityProcessorAssignment returns ext::UiVisibilityProcessorAssignment:
	'visibilityProcessor' (processor=UiVisibilityProcessor | processorAlias=[ext::UiVisibilityProcessor|QualifiedName] ';');

UiVisibilityProperties returns ext::UiVisibilityProperties:
	{ext::UiVisibilityProperties}
	(name=ID)? '{'
	'}';

UiVisibilityPropertiesDef returns ext::UiVisibilityPropertiesDef:
	'visibilityProps' properties=UiVisibilityProperties;

UiVisibilityPropertiesAssignment returns ext::UiVisibilityPropertiesAssignment:
	'visibilityProps' (properties=UiVisibilityProperties | propertyAlias=[ext::UiVisibilityProperties|QualifiedName] ';');

UiChangeTrigger returns ext::UiChangeTrigger:
	'trigger' (endpoint=UiBindingEndpointDef | endpointAlias=[grammarCore::UiBindingEndpointAlias]);

UiVisibilityRule returns ext::UiVisibilityRule:
	UiXbaseVisibilityRule;

UiXbaseVisibilityRule returns ext::UiXbaseVisibilityRule:
	{ext::UiXbaseVisibilityRule}
	'rule'
	expression=XBlockExpression;

UiViewSet returns grammarCore::UiViewSet:
	'viewset' name=ID '{'
	(('beanslots' '{' (beanSlots+=UiBeanSlot)* '}')?
	(bindingEndpointAlias+=UiBindingEndpointAlias)*)
	'}';

UiBindingEndpointAlias returns grammarCore::UiBindingEndpointAlias:
	'bindingAlias' endpoint=UiBindingEndpointDef 'as' alias=ID;

UiBeanSlot returns grammarCore::UiBeanSlot:
	'slot' name=ID ':' jvmType=JvmTypeReference;

UiBinding returns grammarCore::UiBinding:
	'bind' (source=UiBindingEndpointDef | sourceAlias=[grammarCore::UiBindingEndpointAlias]) ((targetToSource?='<')? '--'
	(sourceToTarget?='>')?)
	(target=UiBindingEndpointDef | targetAlias=[grammarCore::UiBindingEndpointAlias]);

UiBindingEndpointDef returns grammarCore::UiBindingEndpointDef:
	bindable=[grammarCore::UiBindable|ID] ':' semanticEndpoint=[cfg::UxEndpointDef] (path=UiPathSegment)?;

UiPathSegment returns grammarCore::UiPathSegment:
	'.' jvmField=[JvmField] path=(UiPathSegment)?;

UiView returns grammarCore::UiView:
	UiIDEView;

UiIDEView returns grammarCore::UiIDEView:
	'ideview' name=ID
	'{'
	('viewset' root=[grammarCore::UiViewSet])?
	('beanslots' '{' (beanSlots+=UiBeanSlot)* '}')?
	(content=UiLayout)?
	// TODO make unordered group
	('bindingAlias' '{' (bindingEndpointAlias+=UiBindingEndpointAlias)* '}')?
	(bindings+=UiBinding)*
	'}';

UiGridLayout returns ext::UiGridLayout:
	{ext::UiGridLayout}
	'gridlayout'
	('('
	(('columns=' columns=INT)?)
	')')?
	name=ID?
	'{'
	(contents+=UiGridLayoutAssigment)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiGridLayoutAssigment returns ext::UiGridLayoutAssigment:
	element=UiEmbeddable (('align' alignment=UiAlignment)? & ('span' from=UiPoint 'to' to=UiPoint)?);

UiPoint returns grammarCore::UiPoint:
	x=INT '/' y=INT;

enum UiAlignment returns ext::YAlignment:
	BOTTOM_LEFT="bottom left" | BOTTOM_CENTER="bottom center" | BOTTOM_RIGHT="bottom right" | BOTTOM_FILL="bottom fill" |
	MIDDLE_LEFT="middle left" | MIDDLE_CENTER="middle center" | MIDDLE_RIGHT="middle right" | BOTTOM_FILL="middle fill" |
	TOP_LEFT="top left" | TOP_CENTER="top center" | TOP_RIGHT="top right" | TOP_FILL="top fill" |
	FILL_LEFT="fill left" | FILL_CENTER="fill center" | FILL_RIGHT="fill RIGHT" | FILL_FILL="fill fill" |
	UNDEFINED="undefined";

UiSpanInfo returns ext::YSpanInfo:
	{ext::YSpanInfo}
	((('columnFrom' columnFrom=INT)
	&
	('columnTo' columnTo=INT))?
	&
	(('rowFrom' rowFrom=INT)
	&
	('rowTo' rowTo=INT))?);

UiTextField returns ext::UiTextField:
	{ext::UiTextField}
	'textfield' name=ID?
	('{'
	(validators+=UiValidator)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	
	'}')?;

UiList returns ext::UiList:
	{ext::UiList}
	'list' name=ID?;

enum SelectionType returns ext::YSelectionType:
	SINGLE="SINGLE" | MULTI="MULTI";

UiEmbeddable returns core::YEmbeddable:
	UiLayout | UiField;

UiLayout returns core::YLayout:
	UiGridLayout;

UiField returns core::YField:
	UiTextField | UiList | UiNumericField | UiCheckBox;

UiNumericField returns ext::UiNumericField:
	{ext::UiNumericField}
	'numericField' name=ID?
	('{'
	(validators+=UiValidator)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiCheckBox returns ext::UiCheckBox:
	{ext::UiCheckBox}
	'checkbox' name=ID?
	('{'
	(validators+=UiValidator)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiValidator returns coreVal::YValidator:
	UiMaxLengthValidator | UiMinLengthValidator | UiRegexpValidator;

UiMaxLengthValidator returns grammarCore::UiMaxLengthValidator:
	{grammarCore::UiMaxLengthValidator}
	'maxLengthValidator' name=ID ('maxLength' maxLength=INT)?;

UiMinLengthValidator returns grammarCore::UiMinLengthValidator:
	{grammarCore::UiMinLengthValidator}
	'minLengthValidator' name=ID ('minLength' minLength=INT)?;

UiRegexpValidator returns grammarCore::UiRegexpValidator:
	{grammarCore::UiRegexpValidator}
	'regexValidator' name=ID ('regex' regExpression=STRING)?;

