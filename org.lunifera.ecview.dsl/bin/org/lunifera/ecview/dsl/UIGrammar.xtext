grammar org.lunifera.ecview.dsl.UIGrammar with org.eclipse.xtext.xbase.Xbase

import "http://www.lunifera.org/ecview/dsl/uimodel/semantics" as cfg
import "http://www.lunifera.org/ecview/dsl/uimodel/core"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/xbase/Xtype"

UiModel returns UiModel:
	'package' packageName=QualifiedName
	imports+=UiImports*
	roots+=UiRootElements*;

UiImports returns UiImports:
	'import' importedNamespace=QualifiedNameWithWildcard (';')?;

UiRootElements returns UiRootElements:
	UiView | UiViewSet | UiValidatorAlias;

	//UiVisibilityProcessor returns UiVisibilityProcessor:
//	{UiVisibilityProcessor}
//	name=ID '{'
//	bindingAlias+=UiBindingEndpointAlias*
//	changeTrigger+=UiChangeTrigger*
//	rule=UiVisibilityRule
//	propertiesAssignment=UiVisibilityPropertiesAssignment
//	'}';

//UiVisibilityProcessorDef returns UiVisibilityProcessorDef:
//	'visibilityProcessor' processor=UiVisibilityProcessor;
//
//UiVisibilityProcessorAssignment returns UiVisibilityProcessorAssignment:
//	'visibilityProcessor' (processor=UiVisibilityProcessor | processorAlias=[UiVisibilityProcessor|QualifiedName] ';');
//
//UiVisibilityProperties returns UiVisibilityProperties:
//	{UiVisibilityProperties}
//	(name=ID)? '{'
//	'}';
//
//UiVisibilityPropertiesDef returns UiVisibilityPropertiesDef:
//	'visibilityProps' properties=UiVisibilityProperties;
//
//UiVisibilityPropertiesAssignment returns UiVisibilityPropertiesAssignment:
//	'visibilityProps' (properties=UiVisibilityProperties | propertyAlias=[UiVisibilityProperties|QualifiedName] ';');
//
//UiChangeTrigger returns UiChangeTrigger:
//	'trigger' (endpoint=UiBindingEndpointAssignment | endpointAlias=[UiBindingEndpointAlias]);
//
//UiVisibilityRule returns UiVisibilityRule:
//	UiXbaseVisibilityRule;
//
//UiXbaseVisibilityRule returns UiXbaseVisibilityRule:
//	{UiXbaseVisibilityRule}
//	'rule'
//	expression=XBlockExpression;
UiValidatorAlias returns UiValidatorAlias:
	'validatorAlias' validator=UiValidator 'as' alias=ID;

UiValidatorAssignment returns UiValidatorAssignment:
	'fieldValidation' field=[UiField] '+=' (validatorDef=UiValidatorDef | validatorAlias=[UiValidatorAlias|QualifiedName]
	';');

UiValidatorDef returns UiValidatorDef:
	validator=UiValidator;

UiViewSet returns UiViewSet:
	'viewset' name=ID '{'
	(beanSlots+=UiBeanSlot)*
	(bindingEndpointAlias+=UiBindingEndpointAlias)*
	'}';

UiBindingEndpointAlias returns UiBindingEndpointAlias:
	'dataAlias' endpoint=UiBindingEndpointAssignment 'as' alias=ID;

UiBeanSlot returns UiBeanSlot:
	'datasource' name=ID ':' jvmType=JvmTypeReference;

UiBinding returns UiBinding:
	'bind' (listBinding?='list')? source=UiBindingEndpointAssignment ((targetToSource?='<')? '--'
	(sourceToTarget?='>')?) target=UiBindingEndpointAssignment;

UiBindingEndpointAssignment returns UiBindingExpression:
	((UiTypedBindableDef {UiBindingEndpointAssignment.typedBindableDef=current} path=(UiPathSegment)?) |
	({UiBindingEndpointAssignment}
	typedBindableAlias=[UiTypedBindable] path=(UiPathSegment)?));

UiPathSegment returns UiPathSegment:
	'.' jvmField=[JvmField] path=(UiPathSegment)?;

UiTypedBindableDef returns UiBindingExpression:
	{UiTypedBindableDef}
	(rawBindable=[UiRawBindable|ID] ':' method=[cfg::UxEndpointDef]);

UiView returns UiView:
	UiIDEView;

UiIDEView returns UiIDEView:
	'ideview' name=ID
	'{'
	('viewset' viewSet=[UiViewSet])?
	(beanSlots+=UiBeanSlot)*
	(content=UiEmbeddable)?
	// TODO make unordered group
	(bindingEndpointAlias+=UiBindingEndpointAlias)*
	(bindings+=UiBinding)*
	(validatorAssignments+=UiValidatorAssignment)*
	'}';

UiGridLayout returns UiGridLayout:
	{UiGridLayout}
	'gridlayout'
	('('
	//	(('columns=' columns=INT)?)
	')')?
	name=ID?
	'{'
	(contents+=UiGridLayoutAssigment)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiGridLayoutAssigment returns UiGridLayoutAssigment:
	element=UiEmbeddable;

UiFormLayout:
	{UiFormLayout}
	'form'
	name=ID?
	'{'
	(contents+=UiFormLayoutAssigment)*
	'}';

UiFormLayoutAssigment:
	element=UiEmbeddable;

UiVerticalLayout:
	{UiVerticalLayout}
	'verticalLayout'
	name=ID?
	'{'
	(contents+=UiVerticalLayoutAssigment)*
	'}';

UiVerticalLayoutAssigment:
	element=UiEmbeddable;

UiHorizontalLayout:
	{UiHorizontalLayout}
	'horizontalLayout'
	name=ID?
	'{'
	(contents+=UiHorizontalLayoutAssigment)*
	'}';

UiHorizontalLayoutAssigment:
	element=UiEmbeddable;

UiPoint returns UiPoint:
	x=INT '/' y=INT;

	//enum UiAlignment returns YAlignment:
//	BOTTOM_LEFT="bottom left" | BOTTOM_CENTER="bottom center" | BOTTOM_RIGHT="bottom right" | BOTTOM_FILL="bottom fill" |
//	MIDDLE_LEFT="middle left" | MIDDLE_CENTER="middle center" | MIDDLE_RIGHT="middle right" | BOTTOM_FILL="middle fill" |
//	TOP_LEFT="top left" | TOP_CENTER="top center" | TOP_RIGHT="top right" | TOP_FILL="top fill" |
//	FILL_LEFT="fill left" | FILL_CENTER="fill center" | FILL_RIGHT="fill RIGHT" | FILL_FILL="fill fill" |
//	UNDEFINED="undefined";

//UiSpanInfo returns YSpanInfo:
//	{YSpanInfo}
//	((('columnFrom' columnFrom=INT)
//	&
//	('columnTo' columnTo=INT))?
//	&
//	(('rowFrom' rowFrom=INT)
//	&
//	('rowTo' rowTo=INT))?);
UiTextField returns UiTextField:
	{UiTextField}
	'textfield' name=ID?
	('{'
	(validators+=UiValidator)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiList returns UiList:
	{UiList}
	'list' name=ID?;

UiTable returns UiTable:
	{UiTable}
	'table' name=ID?
	('{'
	('type' jvmType=JvmTypeReference ';')?
	('selectionType' selectionType=UiSelectionType)?
	columnAssignment=UiColumnAssignments?
	'}')?;

enum UiSelectionType:
	SINGLE='single' | MULTI='multi' | NONE='none';

UiColumnAssignments:
	{UiColumnAssignments}
	'columns' '{'
	columns+=UiColumn*
	'}';

UiColumn returns UiColumn:
	{UiColumn}
	'column' jvmField=[JvmField] ('icon' iconName=STRING)? ';';

UiEmbeddable:
	UiLayout | UiField;

UiLayout:
	UiGridLayout | UiFormLayout | UiHorizontalLayout | UiVerticalLayout;

UiField:
	UiTextField | UiList | UiNumericField | UiCheckBox | UiTable;

UiNumericField:
	{UiNumericField}
	'numericField' name=ID?
	('{'
	(validators+=UiValidator)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiCheckBox:
	{UiCheckBox}
	'checkbox' name=ID?
	('{'
	(validators+=UiValidator)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiValidator:
	UiMaxLengthValidator | UiMinLengthValidator | UiRegexpValidator | UiXbaseValidator;

UiMaxLengthValidator returns UiMaxLengthValidator:
	{UiMaxLengthValidator}
	'MaxLengthValidator' (name=ID)? '(' maxLength=INT ')'?;

UiMinLengthValidator returns UiMinLengthValidator:
	{UiMinLengthValidator}
	'MinLengthValidator' (name=ID)? '(' minLength=INT ')'?;

UiRegexpValidator returns UiRegexpValidator:
	{UiRegexpValidator}
	'RegexValidator' (name=ID)? '(' regExpression=STRING ')'?;

UiXbaseValidator returns UiXbaseValidator:
	{UiXbaseValidator}
	'Expression' name=ID? '(' jvmType=JvmTypeReference ')' expression=XBlockExpression?;	

