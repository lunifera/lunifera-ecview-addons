grammar org.lunifera.ecview.dsl.UIGrammar with org.eclipse.xtext.xbase.Xbase

import "http://www.lunifera.org/ecview/dsl/uimodel/semantics" as cfg
import "http://www.lunifera.org/ecview/dsl/uimodel/core"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/xbase/Xtype"

UiModel returns UiModel:
	'package' packageName=QualifiedName
	imports+=UiImports*
	roots+=UiRootElements*;

UiImports returns UiImports:
	'import' importedNamespace=QualifiedNameWithWildcard (';')?;

UiRootElements returns UiRootElements:
	UiView | UiViewSet | UiValidatorAlias | UiMobileView;

UiValidatorAlias returns UiValidatorAlias:
	'validatorAlias' validator=UiValidator 'as' alias=ID;

UiValidatorAssignment returns UiValidatorAssignment:
	'fieldValidation' field=[UiField] '+=' (validatorDef=UiValidatorDef | validatorAlias=[UiValidatorAlias|QualifiedName]
	';');

UiValidatorDef returns UiValidatorDef:
	validator=UiValidator;

UiViewSet returns UiViewSet:
	'viewset' name=ID '{'
	(beanSlots+=UiBeanSlot)*
	(bindingEndpointAlias+=UiBindingEndpointAlias)*
	'}';

UiBindingEndpointAlias returns UiBindingEndpointAlias:
	'dataAlias' endpoint=UiBindingEndpointAssignment 'as' alias=ID;

UiBeanSlot returns UiBeanSlot:
	'datasource' name=ID ':' jvmType=JvmTypeReference;

UiBinding returns UiBinding:
	'bind' (listBinding?='list')? source=UiBindingEndpointAssignment ((targetToSource?='<')? '--'
	(sourceToTarget?='>')?) target=UiBindingEndpointAssignment;

UiBindingEndpointAssignment returns UiBindingExpression:
	((UiTypedBindableDef {UiBindingEndpointAssignment.typedBindableDef=current} path=(UiPathSegment)?) 
		| (UiCommandBindableDef {UiBindingEndpointAssignment.typedBindableDef=current}) 
		| ({UiBindingEndpointAssignment} typedBindableAlias=[UiTypedBindable] path=(UiPathSegment)?));

UiPathSegment returns UiPathSegment:
	'.' jvmField=[JvmField] path=(UiPathSegment)?;

UiTypedBindableDef returns UiBindingExpression:
	{UiTypedBindableDef}
	(rawBindable=[UiRawBindable|ID] ':' method=[cfg::UxEndpointDef]);

UiCommandBindableDef returns UiCommandBindableDef:
	{UiCommandBindableDef}
	command=UiCommand
;

UiCommand returns UiCommand:
	UiMobileNavigationCommand | UiOpenDialogCommand
;

UiMobileNavigationCommand:
	{UiMobileNavigationCommand}
	'navigateTo' targetPage=UiMobileNavigationPage
;

UiOpenDialogCommand:
	{UiOpenDialogCommand}
	'openDialog' dialog=UiDialog
;


UiView returns UiView:
	UiIDEView;

UiIDEView returns UiIDEView:
	'ideview' name=ID
	'{'
	('viewset' viewSet=[UiViewSet])?
	(beanSlots+=UiBeanSlot)*
	(content=UiEmbeddable)?
	// TODO make unordered group
	(bindingEndpointAlias+=UiBindingEndpointAlias)*
	(bindings+=UiBinding)*
	(validatorAssignments+=UiValidatorAssignment)*
	'}';

UiMobileView returns UiMobileView:
	'mobile' name=ID
	'{'
	('viewset' viewSet=[UiViewSet])?
	(beanSlots+=UiBeanSlot)*
	(content=UiEmbeddable)?
	// TODO make unordered group
	(bindingEndpointAlias+=UiBindingEndpointAlias)*
	(bindings+=UiBinding)*
	(validatorAssignments+=UiValidatorAssignment)*
	'}';

UiGridLayout returns UiGridLayout:
	{UiGridLayout}
	'gridlayout'
	('('
	//	(('columns=' columns=INT)?)
	')')?
	name=ID?
	'{'
	(contents+=UiGridLayoutAssigment)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiGridLayoutAssigment returns UiGridLayoutAssigment:
	element=UiEmbeddable;

UiFormLayout:
	{UiFormLayout}
	'form'
	name=ID?
	'{'
	(contents+=UiFormLayoutAssigment)*
	'}';

UiFormLayoutAssigment:
	element=UiEmbeddable;

UiVerticalLayout:
	{UiVerticalLayout}
	'verticalLayout'
	name=ID?
	'{'
	(contents+=UiVerticalLayoutAssigment)*
	'}';

UiVerticalLayoutAssigment:
	element=UiEmbeddable;

UiHorizontalLayout:
	{UiHorizontalLayout}
	'horizontalLayout'
	name=ID?
	'{'
	(contents+=UiHorizontalLayoutAssigment)*
	'}';

UiHorizontalLayoutAssigment returns UiHorizontalLayoutAssigment:
	element=UiEmbeddable;

UiMobileHorizontalButtonGroup returns UiHorizontalButtonGroup:
	{UiHorizontalButtonGroup}
	'horizontalButtonGroup'
	name=ID?
	'{'
	(contents+=UiMobileHorizontalButtonGroupAssigment)*
	'}';

UiMobileHorizontalButtonGroupAssigment returns UiHorizontalButtonGroupAssigment:
	element=UiEmbeddable;
	
UiMobileVerticalComponentGroup returns UiVerticalComponentGroup:
	{UiVerticalComponentGroup}
	'verticalGroup'
	name=ID?
	'{'
	(contents+=UiMobileVerticalComponentGroupAssigment)*
	(bindings+=UiBinding)*
	'}';

UiMobileVerticalComponentGroupAssigment returns UiVerticalComponentGroupAssigment:
	element=UiEmbeddable;
	
UiMobileTabSheet: 
	{UiMobileTabSheet}
	'mobileTab'
	name=ID?
	'{'
	(tabs+=UiMobileTabAssignment)*
	'}';

UiMobileTabAssignment:
	'tab' (name=ID)? element=UiEmbeddable;
	
UiTabSheet: 
	{UiTabSheet}
	'tabsheet'
	name=ID?
	'{'
	(tabs+=UiTabAssignment)*
	'}';

UiTabAssignment:
	'tab' (name=ID)? element=UiEmbeddable;

UiDialog:
	{UiDialog}
	'dialog' name=ID? '{'
		('type' jvmType=JvmTypeReference ';')?
		(content=UiDialogAssignment)?
		(bindings+=UiBinding)*
	'}';

UiDialogAssignment: 
	element=UiEmbeddable;

UiMobileNavigationPage: 
	{UiMobileNavigationPage}
	'navPage' name=ID? '{'
		('type' jvmType=JvmTypeReference ';')?
		(contents+=UiMobileNavigationPageAssignment)*
		(bindings+=UiBinding)*
	'}';

UiMobileNavigationPageAssignment: 
	element=UiEmbeddable;

UiPoint returns UiPoint:
	x=INT '/' y=INT;

UiTextField returns UiTextField:
	{UiTextField}
	'textfield' name=ID?
	('{'
	(validators+=UiValidator)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;
	
UiImage returns UiImage:
	{UiImage}
	'image' name=ID?
	('{'
		('iconPath' value=STRING)?
		(bindings+=UiBinding)*
	'}')?;

UiList returns UiList:
	{UiList}
	'listSelect' name=ID?;

UiTable returns UiTable:
	{UiTable}
	'table' name=ID?
	('{'
	('type' jvmType=JvmTypeReference ';')?
	('selectionType' selectionType=UiSelectionType)?
	('imageField' itemImageProperty=[JvmField])?
	columnAssignment=UiColumnAssignments?
	(bindings+=UiBinding)*
	'}')?;
	 
UiComboBox returns UiComboBox:
	{UiComboBox}
	'combo' name=ID?
	('{'
	('type' jvmType=JvmTypeReference ';')?
		('captionField' itemCaptionProperty=[JvmField])?
		('imageField' itemImageProperty=[JvmField])?
		(bindings+=UiBinding)*
	'}')?;

UiButton:
	{UiButton}
	'button' name=ID?;
	
UiMobileNavigationButton: 
	{UiMobileNavigationButton}
	'navButton' name=ID? (targetPage=UiMobileNavigationPage | 'alias' targetPageAlias=[UiMobileNavigationPage]);

UiMobileSwitch returns UiSwitch:
	{UiSwitch}
	'switchIt' name=ID?
; 	

enum UiSelectionType:
	SINGLE='single' | MULTI='multi' | NONE='none';

UiColumnAssignments:
	{UiColumnAssignments}
	'columns' '{'
	columns+=UiColumn*
	'}';

UiColumn returns UiColumn:
	{UiColumn}
	'column' jvmField=[JvmField] ('icon' iconName=STRING)? ';';

UiEmbeddable:
	UiLayout | UiField | UiAction | UiTabSheet | UiMobileEmbeddable;

UiMobileEmbeddable:
	UiMobileLayout | UiMobileField | UiMobileTabSheet | UiMobileAction;

UiMobileLayout:
	UiMobileHorizontalButtonGroup | UiMobileVerticalComponentGroup | UiMobileNavigationPage;
	
UiMobileField:
	UiMobileSwitch;

UiLayout:
	UiGridLayout | UiFormLayout | UiHorizontalLayout | UiVerticalLayout;

UiField:
	UiTextField | UiList | UiNumericField | UiCheckBox | UiTable | UiComboBox | UiImage;

UiAction:
	UiButton;

UiMobileAction:
	UiMobileNavigationButton
;

UiNumericField:
	{UiNumericField}
	'numericField' name=ID?
	('{'
	(validators+=UiValidator)*
	//	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiCheckBox:
	{UiCheckBox}
	'checkbox' name=ID?
	('{'
	(validators+=UiValidator)*
	'}')?;

UiValidator:
	UiMaxLengthValidator | UiMinLengthValidator | UiRegexpValidator | UiXbaseValidator;

UiMaxLengthValidator returns UiMaxLengthValidator:
	{UiMaxLengthValidator}
	'MaxLengthValidator' (name=ID)? '(' maxLength=INT ')'?;

UiMinLengthValidator returns UiMinLengthValidator:
	{UiMinLengthValidator}
	'MinLengthValidator' (name=ID)? '(' minLength=INT ')'?;

UiRegexpValidator returns UiRegexpValidator:
	{UiRegexpValidator}
	'RegexValidator' (name=ID)? '(' regExpression=STRING ')'?;

UiXbaseValidator returns UiXbaseValidator:
	{UiXbaseValidator}
	'Expression' name=ID? '(' jvmType=JvmTypeReference ')' expression=XBlockExpression?;

