/*
 * generated by Xtext
 */
package org.lunifera.ecview.dsl.validation

import com.google.inject.Inject
import org.eclipse.xtext.common.types.JvmType
import org.eclipse.xtext.naming.IQualifiedNameProvider
import org.eclipse.xtext.validation.Check
import org.lunifera.ecview.dsl.derivedstate.TypeHelper
import org.lunifera.ecview.semantic.uimodel.UiModelPackage
import org.lunifera.ecview.semantic.uimodel.UiSearchField

//import org.eclipse.xtext.validation.Check
/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class UIGrammarValidator extends AbstractUIGrammarValidator {

	@Inject extension TypeHelper
	@Inject extension IQualifiedNameProvider

	//  public static val INVALID_NAME = 'invalidName'
	//
	//	@Check
	//	def checkGreetingStartsWithCapital(Greeting greeting) {
	//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
	//			warning('Name should start with a capital', 
	//					MyDslPackage.Literals.GREETING__NAME,
	//					INVALID_NAME)
	//		}
	//	}
	@Check
	def checkSearchField(UiSearchField field) {
		val JvmType type = field.property.typeofLastSegment
		if (type.number) {
			// everything is fine
		} else if (type.string) {
			// everything is fine
		} else if (type.boolean) {
			// everything is fine
		} else {
			error(
				"Searchfields for type " + type.fullyQualifiedName.toString + " are not supported in this version",
				field,
				UiModelPackage.Literals.UI_SEARCH_FIELD__PROPERTY
			)
		}
	}

}
