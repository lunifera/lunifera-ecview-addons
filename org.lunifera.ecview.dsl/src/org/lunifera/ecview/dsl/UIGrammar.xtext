grammar org.lunifera.ecview.dsl.UIGrammar with org.eclipse.xtext.xbase.Xbase

import "http://www.lunifera.org/ecview/dsl/uimodel/semantics" as cfg
import "http://www.lunifera.org/ecview/dsl/uimodel/core"
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.eclipse.org/xtext/xbase/Xbase"
import "http://www.eclipse.org/xtext/xbase/Xtype"

UiModel returns UiModel:
	'package' packageName=QualifiedName
	imports+=UiImports*
	roots+=UiRootElements*;

UiImports returns UiImports:
	'import' importedNamespace=QualifiedNameWithWildcard (';')?;

UiRootElements returns UiRootElements:
	UiView | UiViewSet | UiValidatorAlias | UiMobileView;

UiValidatorAlias returns UiValidatorAlias:
	'validatorAlias' validator=UiValidator 'as' alias=ID (';')?;

UiValidatorAssignment returns UiValidatorAssignment:
	'fieldValidation' field=[UiField] '+=' (validatorDef=UiValidatorDef | validatorAlias=[UiValidatorAlias|QualifiedName]
	(';')?);

UiValidatorDef returns UiValidatorDef:
	validator=UiValidator;

UiViewSet returns UiViewSet:
	'viewset' name=ID '{'
	(beanSlots+=UiBeanSlot)*
	(bindingEndpointAlias+=UiBindingEndpointAlias)*
	'}';

UiBindingEndpointAlias returns UiBindingEndpointAlias:
	'dataAlias' endpoint=UiBindingEndpointAssignment 'as' alias=ID (';')?;

UiBeanSlot returns UiBeanSlot:
	'datasource' name=ID ':' jvmType=JvmTypeReference (';')?;

UiBinding returns UiBinding:
	'bind' (listBinding?='list')? source=UiBindingEndpointAssignment ((targetToSource?='<')? '--'
	(sourceToTarget?='>')?) target=UiBindingEndpointAssignment (';')?;

UiBindingEndpointAssignment returns UiBindingExpression:
	((UiTypedBindableDef {UiBindingEndpointAssignment.typedBindableDef=current} path=(UiPathSegment)?)
	| (UiCommandBindableDef {UiBindingEndpointAssignment.typedBindableDef=current})
	| ({UiBindingEndpointAssignment} typedBindableAlias=[UiTypedBindable] path=(UiPathSegment)?));

UiPathSegment returns UiPathSegment:
	'.' jvmField=[JvmField] path=(UiPathSegment)?;

UiTypedBindableDef returns UiBindingExpression:
	{UiTypedBindableDef}
	('[' rawBindable=[UiRawBindable] (rawBindablePath=UiRawBindablePathSegment)? ']' '.' method=[cfg::UxEndpointDef]);

UiRawBindablePathSegment:
	{UiRawBindablePathSegment}
	'.' rawBindable=[UiRawBindable] (path=UiRawBindablePathSegment)?;

UiCommandBindableDef returns UiCommandBindableDef:
	{UiCommandBindableDef}
	command=UiCommand;

UiCommand returns UiCommand:
	UiMobileNavigationCommand | UiOpenDialogCommand | UiSearchWithDialogCommand;

UiMobileNavigationCommand:
	{UiMobileNavigationCommand}
	'navigateTo' targetPage=UiMobileNavigationPage;

UiOpenDialogCommand:
	{UiOpenDialogCommand}
	'openDialog' dialog=UiDialog;

UiSearchWithDialogCommand:
	{UiSearchWithDialogCommand}
	'searchWith' dialog=UiSearchDialog;

UiView returns UiView:
	UiIDEView;

UiIDEView returns UiIDEView:
	'ideview' name=ID
	'{'
	('viewset' viewSet=[UiViewSet] (';')?)?
	((beanSlots+=UiBeanSlot)
	|
	(bindingEndpointAlias+=UiBindingEndpointAlias)
	)*
	content=UiEmbeddable
	((bindingEndpointAlias+=UiBindingEndpointAlias)
	|
	(bindings+=UiBinding)
	|
	(validatorAssignments+=UiValidatorAssignment))*
	'}';

UiMobileView returns UiMobileView:
	'mobile' name=ID
	'{'
	('viewset' viewSet=[UiViewSet] (';')?)?
	((beanSlots+=UiBeanSlot)
	|
	(bindingEndpointAlias+=UiBindingEndpointAlias)
	)*
	content=UiEmbeddable
	((bindingEndpointAlias+=UiBindingEndpointAlias)
	|
	(bindings+=UiBinding)
	|
	(validatorAssignments+=UiValidatorAssignment))*
	'}';

UiGridLayout returns UiGridLayout:
	{UiGridLayout}
	'gridlayout'
	('('
	(('columns=' columns=INT)?
	& (fillHorizontal?='fill-h')?
	& (fillVertical?='fill-v')?)
	')')?
	name=ID?
	'{'
	(contents+=UiGridLayoutAssigment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiVisibilityProcessorAssignment:
	{UiVisibilityProcessorAssignment}
	processor=UiVisibilityProcessor
;

UiGridLayoutAssigment returns UiGridLayoutAssigment:
	element=UiEmbeddable;

UiFormLayout:
	{UiFormLayout}
	'form'
	name=ID?
	'{'
	(contents+=UiFormLayoutAssigment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiFormLayoutAssigment:
	element=UiEmbeddable;

UiVerticalLayout:
	{UiVerticalLayout}
	'verticalLayout'
	('('
	fillVertical?='fill-v'
	')')?
	name=ID?
	'{'
	(contents+=UiVerticalLayoutAssigment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiVerticalLayoutAssigment:
	element=UiEmbeddable;

UiHorizontalLayout:
	{UiHorizontalLayout}
	'horizontalLayout'
	('('
	fillHorizontal?='fill-h'
	')')?
	name=ID?
	'{'
	(contents+=UiHorizontalLayoutAssigment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiHorizontalLayoutAssigment returns UiHorizontalLayoutAssigment:
	element=UiEmbeddable;

UiMobileHorizontalButtonGroup returns UiHorizontalButtonGroup:
	{UiHorizontalButtonGroup}
	'horizontalButtonGroup'
	name=ID?
	'{'
	(contents+=UiMobileHorizontalButtonGroupAssigment)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiMobileHorizontalButtonGroupAssigment returns UiHorizontalButtonGroupAssigment:
	element=UiEmbeddable;

UiMobileVerticalComponentGroup returns UiVerticalComponentGroup:
	{UiVerticalComponentGroup}
	'verticalGroup'
	name=ID?
	'{'
	(contents+=UiMobileVerticalComponentGroupAssigment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiMobileVerticalComponentGroupAssigment returns UiVerticalComponentGroupAssigment:
	element=UiEmbeddable;

UiMobileTabSheet:
	{UiMobileTabSheet}
	'mobileTab'
	name=ID?
	'{'
	(tabs+=UiMobileTabAssignment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiMobileTabAssignment:
	'tab' (name=ID)? element=UiEmbeddable;

UiTabSheet:
	{UiTabSheet}
	'tabsheet'
	name=ID?
	'{'
	(tabs+=UiTabAssignment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiTabAssignment:
	'tab' (name=ID)? element=UiEmbeddable;

UiDialog:
	{UiDialog}
	'dialog' name=ID? '{'
	('type' jvmType=JvmTypeReference (';')?)?
	(content=UiDialogAssignment (';')?)?
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiDialogAssignment:
	element=UiEmbeddable;

UiSearchDialog:
	{UiSearchDialog}
	'searchdialog' name=ID? '{'
	('type' jvmType=JvmTypeReference )?
	('search' '{'
	searchFields+=UiDialogSearchFieldAssignment*
	'}')?
	('content' '{'
	content=UiDialogAssignment
	'}')?
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiDialogSearchFieldAssignment:
	element=UiSearchField;

UiMobileNavigationPage:
	{UiMobileNavigationPage}
	'navPage' name=ID? '{'
	('type' jvmType=JvmTypeReference (';')?)?
	(contents+=UiMobileNavigationPageAssignment)*
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}';

UiMobileNavigationPageAssignment:
	element=UiEmbeddable;

UiPoint returns UiPoint:
	x=INT '/' y=INT;

UiTextField returns UiTextField:
	{UiTextField}
	'textfield'
	('('
	(('maxLength=' maxLength=INT)?
	& ('minLength=' minLength=INT)?
	& ('regex=' regex=STRING)?)
	')')?
	name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiSearchField:
	{UiSearchField}
	'searchfield' property=[JvmField];

UiTextArea returns UiTextArea:
	{UiTextArea}
	'textarea' name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiDateField returns UiDateField:
	{UiDateField}
	'datefield' name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiBrowser returns UiBrowser:
	{UiBrowser}
	'browser' name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiProgressBar returns UiProgressBar:
	{UiProgressBar}
	'progressbar' name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiImage returns UiImage:
	{UiImage}
	'image' name=ID?
	('{'
	('iconPath' value=STRING (';')?)?
	(bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiList returns UiList:
	{UiList}
	'listSelect' name=ID?;

UiTable returns UiTable:
	{UiTable}
	'table' name=ID?
	('{'
	(('type' jvmType=JvmTypeReference (';')?)?
	& ('selectionType' selectionType=UiSelectionType (';')?)?
	& ('imageField' itemImageProperty=[JvmField] (';')?)?)
	columnAssignment=UiColumnsAssignment?
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiComboBox returns UiComboBox:
	{UiComboBox}
	'combo' name=ID?
	('{'
	(('type' jvmType=JvmTypeReference (';')?)?
	& ('captionField' itemCaptionProperty=[JvmField] (';')?)?
	& ('imageField' itemImageProperty=[JvmField] (';')?)?)
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiButton:
	{UiButton}
	'button' name=ID?;

UiMobileNavigationButton:
	{UiMobileNavigationButton}
	'navButton' name=ID? (targetPage=UiMobileNavigationPage | 'alias' targetPageAlias=[UiMobileNavigationPage]);

UiMobileSwitch returns UiSwitch:
	{UiSwitch}
	'switchIt' name=ID? ('{'
		(processorAssignment=UiVisibilityProcessorAssignment)?
		(validators+=UiValidator
		|
		bindings+=UiBinding)*
	'}')?;

UiLabel:
	{UiLabel}
	'label' name=ID? ('{'
	(processorAssignment=UiVisibilityProcessorAssignment)?
	(bindings+=UiBinding)*
	'}')?;

UiDecimalField returns UiDecimalField:
	{UiDecimalField}
	'decimalField'
	('('
	((grouping?='grouping')?
	&
	(markNegative?='markNegative')?
	&
	('precision=' precision=INT)?)
	')')?
	name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiOptionsGroup:
	{UiOptionsGroup}
	'optionsgroup'
	name=ID?
	('{'
	(('type' jvmType=JvmTypeReference)?
	& ('selectionType' selectionType=UiSelectionType)?
	& ('captionField' itemCaptionProperty=[JvmField])?
	& ('imageField' itemImageProperty=[JvmField])?)
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

enum UiSelectionType returns UiSelectionType:
	SINGLE='single' | MULTI='multi' | NONE='none';

UiColumnsAssignment:
	{UiColumnsAssignment}
	'columns' '{'
	columns+=UiColumn*
	'}';

UiColumn returns UiColumn:
	{UiColumn}
	'column' jvmField=[JvmField] ('icon' iconName=STRING)? (';')?;

UiEmbeddable:
	UiLayout | UiField | UiAction | UiTabSheet | UiMobileEmbeddable;

UiMobileEmbeddable:
	UiMobileLayout | UiMobileField | UiMobileTabSheet | UiMobileAction;

UiMobileLayout:
	UiMobileHorizontalButtonGroup | UiMobileVerticalComponentGroup | UiMobileNavigationPage;

UiMobileField:
	UiMobileSwitch;

UiLayout:
	UiGridLayout | UiFormLayout | UiHorizontalLayout | UiVerticalLayout;

UiField:
	UiTextField | UiList | UiNumericField | UiCheckBox | UiTable | UiComboBox | UiImage | UiSearchField | UiLabel |
	UiDecimalField |
	UiTextArea | UiDateField | UiBrowser | UiProgressBar | UiOptionsGroup;

UiAction:
	UiButton;

UiMobileAction:
	UiMobileNavigationButton;

UiNumericField:
	{UiNumericField}
	'numericField'
	('('
	((grouping?='grouping')?
	&
	(markNegative?='markNegative')?)
	')')?
	name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiCheckBox:
	{UiCheckBox}
	'checkbox' name=ID?
	('{'
	(validators+=UiValidator
		|
	bindings+=UiBinding)*
	(processorAssignment=UiVisibilityProcessorAssignment)?
	'}')?;

UiValidator:
	UiMaxLengthValidator | UiMinLengthValidator | UiRegexpValidator | UiXbaseValidator;

UiMaxLengthValidator returns UiMaxLengthValidator:
	{UiMaxLengthValidator}
	'MaxLengthValidator' (name=ID)? '(' maxLength=INT ')'?;

UiMinLengthValidator returns UiMinLengthValidator:
	{UiMinLengthValidator}
	'MinLengthValidator' (name=ID)? '(' minLength=INT ')'?;

UiRegexpValidator returns UiRegexpValidator:
	{UiRegexpValidator}
	'RegexValidator' (name=ID)? '(' regExpression=STRING ')'?;

UiXbaseValidator returns UiXbaseValidator:
	{UiXbaseValidator}
	'Expression' name=ID? '(' jvmType=JvmTypeReference ')' expression=XBlockExpression?;

UiVisibilityProcessor:
	{UiVisibilityProcessor}
	'visibility' (name=ID)? '{'
		propertiesAssignment=UiVisibilityPropertiesAssignment
	'}'
	( 'uses' '{'
		(bindingAlias+=UiBindingEndpointAlias
			|
		changeTrigger+=UiChangeTrigger
		)*
	'}')?
	('activation' 
		rule=UiXbaseVisibilityRule
	)?
;

UiXbaseVisibilityRule:
	expression=XBlockExpression
;

UiVisibilityPropertiesAssignment:
	{UiVisibilityPropertiesAssignment}
	properties+=UiVisibilityProperty*
;
 
UiVisibilityProperty:
	bindableDef=UiTypedBindableDef '=' assignmentExpression=XAssignment
;

UiChangeTrigger:
	'fireOn' endpoint=UiBindingEndpointAssignment
;


