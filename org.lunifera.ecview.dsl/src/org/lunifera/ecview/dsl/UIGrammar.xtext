grammar org.lunifera.ecview.dsl.UIGrammar with org.eclipse.xtext.xbase.Xbase

import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/core.ecore" as core
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/datatypes.ecore" as coreDt
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/visibility.ecore" as coreVis
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/binding.ecore" as coreBind
import "platform:/resource/org.eclipse.emf.ecp.ecview.common.model/model/validation.ecore" as coreVal
import "platform:/resource/org.eclipse.emf.ecp.ecview.extension.model/model/extension.ecore" as ext
import "platform:/resource/org.eclipse.emf.ecp.ecview.extension.model/model/extdatatypes.ecore" as extDt
import "platform:/resource/org.lunifera.ecview.uisemantics/model/generated/UISemanticsGrammar.ecore" as cfg
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes"
import "http://www.lunifera.org/ecview/dsl/UIModel"

UiModel:
	viewSet+=UiViewSet*;

UiViewSet returns core::YViewSet:
	{core::YViewSet}
	'viewset' name=ID
	(('beanslots' '{' (beanSlots+=UiBeanSlot)* '}')?
	(views+=UiView)*);

UiBeanSlot returns core::YBeanSlot:
	{GBeanSlot}
	'slot' name=ID ':' jvmType=JvmTypeReference;

UiView returns core::YView:
	UiIDEView;

UiIDEView:
	'ideview' name=ID
	'{'
	(layouts+=UiLayout)*
	(bindings+=UiBinding)*
	'}';

UiGridLayout returns ext::YGridLayout:
	{GGridLayout}
	'gridlayout'
	('('
	((('columns=' columns=INT)?)
	&
	((fillHorizontal?='fill-h')?)
	&
	((fillVertical?='fill-v')?)
	&
	((spacing?='spacing')?)
	&
	((margin?='margin')?))
	')')?
	name=ID?
	'{'
	(contents+=UiGridLayoutAssigment)*
	'}';

UiGridLayoutAssigment:
	element=UiEmbeddable (('align' alignment=UiAlignment)? & ('span' from=UiPoint 'to' to=UiPoint)?);

UiPoint:
	x=INT '/' y=INT;

enum UiAlignment returns ext::YAlignment:
	BOTTOM_LEFT="bottom left" | BOTTOM_CENTER="bottom center" | BOTTOM_RIGHT="bottom right" | BOTTOM_FILL="bottom fill" |
	MIDDLE_LEFT="middle left" | MIDDLE_CENTER="middle center" | MIDDLE_RIGHT="middle right" | BOTTOM_FILL="middle fill" |
	TOP_LEFT="top left" | TOP_CENTER="top center" | TOP_RIGHT="top right" | TOP_FILL="top fill" |
	FILL_LEFT="fill left" | FILL_CENTER="fill center" | FILL_RIGHT="fill RIGHT" | FILL_FILL="fill fill" |
	UNDEFINED="undefined";

UiSpanInfo returns ext::YSpanInfo:
	{ext::YSpanInfo}
	((('columnFrom' columnFrom=INT)
	&
	('columnTo' columnTo=INT))?
	&
	(('rowFrom' rowFrom=INT)
	&
	('rowTo' rowTo=INT))?);

UiTextField returns ext::YTextField:
	{GTextField}
	'textfield' name=ID?
	('{' (('datatype' datatype=[extDt::YTextDatatype])?
	&
	('datadescription' datadescription=[coreDt::YDatadescription])?
	&
	('value' value=ID)?) '}')?;

UiList returns ext::YList:
	{GList}
	'list' name=ID?;

enum SelectionType returns ext::YSelectionType:
	SINGLE="SINGLE" | MULTI="MULTI";

UiEmbeddable returns core::YEmbeddable:
	UiLayout | UiField;

UiLayout returns core::YLayout:
	UiGridLayout;

UiField returns core::YField:
	UiTextField | UiList;

UiValidator returns coreVal::YValidator:
	UiMaxLengthValidator | UiMinLengthValidator;

UiMaxLengthValidator returns coreVal::YValidator:
	{coreVal::YValidator}
	'max';

UiMinLengthValidator returns coreVal::YValidator:
	{coreVal::YValidator}
	'min';
	
UiBinding:
	'bind' source=UiSourceBindingEndpoint ((targetToSource?='<')? '--' (sourceToTarget?='>')?) target=UiTargetBindingEndpoint;

UiSourceBindingEndpoint:
	embeddable=[core::YBindable|FQN] ':' endpoint=[cfg::UxEndpointDefCommon] (path=UiPathSegment)?;

UiTargetBindingEndpoint:
	embeddable=[core::YBindable|FQN] ':' endpoint=[cfg::UxEndpointDefCommon] (path=UiPathSegment)?;
	
UiPathSegment:
	{UiPathSegment}
	'->' jvmField=[JvmField] path=(UiPathSegment)?;

FQN:
	(ID '.')* ID;
