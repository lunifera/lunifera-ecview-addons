/*
* generated by Xtext
*/
package org.lunifera.ecview.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class UIGrammarGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class UiModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UiModel");
		private final Assignment cViewSetAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cViewSetViewSetParserRuleCall_0 = (RuleCall)cViewSetAssignment.eContents().get(0);
		
		//UiModel:
		//	viewSet+=ViewSet*;
		public ParserRule getRule() { return rule; }

		//viewSet+=ViewSet*
		public Assignment getViewSetAssignment() { return cViewSetAssignment; }

		//ViewSet
		public RuleCall getViewSetViewSetParserRuleCall_0() { return cViewSetViewSetParserRuleCall_0; }
	}

	public class ViewSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ViewSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cYViewSetAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cViewsetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cBeanslotsKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cBeanSlotsAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cBeanSlotsBeanSlotParserRuleCall_3_1_2_0 = (RuleCall)cBeanSlotsAssignment_3_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_1_3 = (Keyword)cGroup_3_1.eContents().get(3);
		private final Assignment cViewsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cViewsViewParserRuleCall_3_2_0 = (RuleCall)cViewsAssignment_3_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ViewSet returns core::YViewSet:
		//	{core::YViewSet} "viewset" name=ID ("{" ("beanslots" "{" beanSlots+=BeanSlot* "}")? views+=View* "}")?;
		public ParserRule getRule() { return rule; }

		//{core::YViewSet} "viewset" name=ID ("{" ("beanslots" "{" beanSlots+=BeanSlot* "}")? views+=View* "}")?
		public Group getGroup() { return cGroup; }

		//{core::YViewSet}
		public Action getYViewSetAction_0() { return cYViewSetAction_0; }

		//"viewset"
		public Keyword getViewsetKeyword_1() { return cViewsetKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//("{" ("beanslots" "{" beanSlots+=BeanSlot* "}")? views+=View* "}")?
		public Group getGroup_3() { return cGroup_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_0() { return cLeftCurlyBracketKeyword_3_0; }

		//("beanslots" "{" beanSlots+=BeanSlot* "}")?
		public Group getGroup_3_1() { return cGroup_3_1; }

		//"beanslots"
		public Keyword getBeanslotsKeyword_3_1_0() { return cBeanslotsKeyword_3_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3_1_1() { return cLeftCurlyBracketKeyword_3_1_1; }

		//beanSlots+=BeanSlot*
		public Assignment getBeanSlotsAssignment_3_1_2() { return cBeanSlotsAssignment_3_1_2; }

		//BeanSlot
		public RuleCall getBeanSlotsBeanSlotParserRuleCall_3_1_2_0() { return cBeanSlotsBeanSlotParserRuleCall_3_1_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_1_3() { return cRightCurlyBracketKeyword_3_1_3; }

		//views+=View*
		public Assignment getViewsAssignment_3_2() { return cViewsAssignment_3_2; }

		//View
		public RuleCall getViewsViewParserRuleCall_3_2_0() { return cViewsViewParserRuleCall_3_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3_3() { return cRightCurlyBracketKeyword_3_3; }
	}

	public class BeanSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BeanSlot");
		private final RuleCall cGBeanSlotParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//BeanSlot returns core::YBeanSlot:
		//	GBeanSlot;
		public ParserRule getRule() { return rule; }

		//GBeanSlot
		public RuleCall getGBeanSlotParserRuleCall() { return cGBeanSlotParserRuleCall; }
	}

	public class GBeanSlotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GBeanSlot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSlotKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJvmTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cJvmTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cJvmTypeAssignment_3.eContents().get(0);
		
		//GBeanSlot:
		//	"slot" name=ID ":" jvmType=JvmTypeReference;
		public ParserRule getRule() { return rule; }

		//"slot" name=ID ":" jvmType=JvmTypeReference
		public Group getGroup() { return cGroup; }

		//"slot"
		public Keyword getSlotKeyword_0() { return cSlotKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//jvmType=JvmTypeReference
		public Assignment getJvmTypeAssignment_3() { return cJvmTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getJvmTypeJvmTypeReferenceParserRuleCall_3_0() { return cJvmTypeJvmTypeReferenceParserRuleCall_3_0; }
	}

	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "View");
		private final RuleCall cIDEViewParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//View returns core::YView:
		//	IDEView;
		public ParserRule getRule() { return rule; }

		//IDEView
		public RuleCall getIDEViewParserRuleCall() { return cIDEViewParserRuleCall; }
	}

	public class IDEViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IDEView");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIdeviewKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cActionsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_2_1_0 = (RuleCall)cActionsAssignment_2_1.eContents().get(0);
		private final Assignment cLayoutsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cLayoutsLayoutParserRuleCall_2_2_0 = (RuleCall)cLayoutsAssignment_2_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		
		//IDEView:
		//	"ideview" name=ID ("{" actions+=Action* layouts+=Layout* "}")?;
		public ParserRule getRule() { return rule; }

		//"ideview" name=ID ("{" actions+=Action* layouts+=Layout* "}")?
		public Group getGroup() { return cGroup; }

		//"ideview"
		public Keyword getIdeviewKeyword_0() { return cIdeviewKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//("{" actions+=Action* layouts+=Layout* "}")?
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_2_1() { return cActionsAssignment_2_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_2_1_0() { return cActionsActionParserRuleCall_2_1_0; }

		//layouts+=Layout*
		public Assignment getLayoutsAssignment_2_2() { return cLayoutsAssignment_2_2; }

		//Layout
		public RuleCall getLayoutsLayoutParserRuleCall_2_2_0() { return cLayoutsLayoutParserRuleCall_2_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3() { return cRightCurlyBracketKeyword_2_3; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBodyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBodyXExpressionParserRuleCall_2_1_0 = (RuleCall)cBodyAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Action:
		//	"action" name=ID ("{" body=XExpression "}");
		public ParserRule getRule() { return rule; }

		//"action" name=ID ("{" body=XExpression "}")
		public Group getGroup() { return cGroup; }

		//"action"
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{" body=XExpression "}"
		public Group getGroup_2() { return cGroup_2; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0() { return cLeftCurlyBracketKeyword_2_0; }

		//body=XExpression
		public Assignment getBodyAssignment_2_1() { return cBodyAssignment_2_1; }

		//XExpression
		public RuleCall getBodyXExpressionParserRuleCall_2_1_0() { return cBodyXExpressionParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_2() { return cRightCurlyBracketKeyword_2_2; }
	}

	public class LayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Layout");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHorizontalLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cVerticalLayoutParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cGridLayoutParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Layout returns core::YLayout:
		//	HorizontalLayout | VerticalLayout | GridLayout;
		public ParserRule getRule() { return rule; }

		//HorizontalLayout | VerticalLayout | GridLayout
		public Alternatives getAlternatives() { return cAlternatives; }

		//HorizontalLayout
		public RuleCall getHorizontalLayoutParserRuleCall_0() { return cHorizontalLayoutParserRuleCall_0; }

		//VerticalLayout
		public RuleCall getVerticalLayoutParserRuleCall_1() { return cVerticalLayoutParserRuleCall_1; }

		//GridLayout
		public RuleCall getGridLayoutParserRuleCall_2() { return cGridLayoutParserRuleCall_2; }
	}

	public class HorizontalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HorizontalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHorizontalLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cCellStylesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cCellStylesHorizontalLayoutCellStyleParserRuleCall_2_0_1_0 = (RuleCall)cCellStylesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFillHorizontalAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cFillHorizontalFillhorizontalKeyword_2_1_0_0 = (Keyword)cFillHorizontalAssignment_2_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//HorizontalLayout returns ext::YHorizontalLayout:
		//	"horizontal layout" id=ID ("{" cellStyles+=HorizontalLayoutCellStyle* | fillHorizontal?="fillhorizontal" "}");
		public ParserRule getRule() { return rule; }

		//"horizontal layout" id=ID ("{" cellStyles+=HorizontalLayoutCellStyle* | fillHorizontal?="fillhorizontal" "}")
		public Group getGroup() { return cGroup; }

		//"horizontal layout"
		public Keyword getHorizontalLayoutKeyword_0() { return cHorizontalLayoutKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{" cellStyles+=HorizontalLayoutCellStyle* | fillHorizontal?="fillhorizontal" "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" cellStyles+=HorizontalLayoutCellStyle*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//cellStyles+=HorizontalLayoutCellStyle*
		public Assignment getCellStylesAssignment_2_0_1() { return cCellStylesAssignment_2_0_1; }

		//HorizontalLayoutCellStyle
		public RuleCall getCellStylesHorizontalLayoutCellStyleParserRuleCall_2_0_1_0() { return cCellStylesHorizontalLayoutCellStyleParserRuleCall_2_0_1_0; }

		//fillHorizontal?="fillhorizontal" "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//fillHorizontal?="fillhorizontal"
		public Assignment getFillHorizontalAssignment_2_1_0() { return cFillHorizontalAssignment_2_1_0; }

		//"fillhorizontal"
		public Keyword getFillHorizontalFillhorizontalKeyword_2_1_0_0() { return cFillHorizontalFillhorizontalKeyword_2_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_1() { return cRightCurlyBracketKeyword_2_1_1; }
	}

	public class HorizontalLayoutCellStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HorizontalLayoutCellStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTargetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTargetAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTargetYEmbeddableCrossReference_0_1_0 = (CrossReference)cTargetAssignment_0_1.eContents().get(0);
		private final RuleCall cTargetYEmbeddableIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTargetYEmbeddableCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlignmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlignmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlignmentAlignmentEnumRuleCall_1_1_0 = (RuleCall)cAlignmentAssignment_1_1.eContents().get(0);
		
		//HorizontalLayoutCellStyle returns ext::YHorizontalLayoutCellStyle:
		//	"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment;
		public ParserRule getRule() { return rule; }

		//"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//"target" target=[core::YEmbeddable]
		public Group getGroup_0() { return cGroup_0; }

		//"target"
		public Keyword getTargetKeyword_0_0() { return cTargetKeyword_0_0; }

		//target=[core::YEmbeddable]
		public Assignment getTargetAssignment_0_1() { return cTargetAssignment_0_1; }

		//[core::YEmbeddable]
		public CrossReference getTargetYEmbeddableCrossReference_0_1_0() { return cTargetYEmbeddableCrossReference_0_1_0; }

		//ID
		public RuleCall getTargetYEmbeddableIDTerminalRuleCall_0_1_0_1() { return cTargetYEmbeddableIDTerminalRuleCall_0_1_0_1; }

		//"alignment" alignment=Alignment
		public Group getGroup_1() { return cGroup_1; }

		//"alignment"
		public Keyword getAlignmentKeyword_1_0() { return cAlignmentKeyword_1_0; }

		//alignment=Alignment
		public Assignment getAlignmentAssignment_1_1() { return cAlignmentAssignment_1_1; }

		//Alignment
		public RuleCall getAlignmentAlignmentEnumRuleCall_1_1_0() { return cAlignmentAlignmentEnumRuleCall_1_1_0; }
	}

	public class VerticalLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerticalLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVerticalLayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cCellStylesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cCellStylesVerticalLayoutCellStyleParserRuleCall_2_0_1_0 = (RuleCall)cCellStylesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Assignment cFillVerticalAssignment_2_1_0 = (Assignment)cGroup_2_1.eContents().get(0);
		private final Keyword cFillVerticalFillverticalKeyword_2_1_0_0 = (Keyword)cFillVerticalAssignment_2_1_0.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		
		//VerticalLayout returns ext::YVerticalLayout:
		//	"vertical layout" id=ID ("{" cellStyles+=VerticalLayoutCellStyle* | fillVertical?="fillvertical" "}");
		public ParserRule getRule() { return rule; }

		//"vertical layout" id=ID ("{" cellStyles+=VerticalLayoutCellStyle* | fillVertical?="fillvertical" "}")
		public Group getGroup() { return cGroup; }

		//"vertical layout"
		public Keyword getVerticalLayoutKeyword_0() { return cVerticalLayoutKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{" cellStyles+=VerticalLayoutCellStyle* | fillVertical?="fillvertical" "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" cellStyles+=VerticalLayoutCellStyle*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//cellStyles+=VerticalLayoutCellStyle*
		public Assignment getCellStylesAssignment_2_0_1() { return cCellStylesAssignment_2_0_1; }

		//VerticalLayoutCellStyle
		public RuleCall getCellStylesVerticalLayoutCellStyleParserRuleCall_2_0_1_0() { return cCellStylesVerticalLayoutCellStyleParserRuleCall_2_0_1_0; }

		//fillVertical?="fillvertical" "}"
		public Group getGroup_2_1() { return cGroup_2_1; }

		//fillVertical?="fillvertical"
		public Assignment getFillVerticalAssignment_2_1_0() { return cFillVerticalAssignment_2_1_0; }

		//"fillvertical"
		public Keyword getFillVerticalFillverticalKeyword_2_1_0_0() { return cFillVerticalFillverticalKeyword_2_1_0_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_1_1() { return cRightCurlyBracketKeyword_2_1_1; }
	}

	public class VerticalLayoutCellStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerticalLayoutCellStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTargetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTargetAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTargetYEmbeddableCrossReference_0_1_0 = (CrossReference)cTargetAssignment_0_1.eContents().get(0);
		private final RuleCall cTargetYEmbeddableIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTargetYEmbeddableCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlignmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlignmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlignmentAlignmentEnumRuleCall_1_1_0 = (RuleCall)cAlignmentAssignment_1_1.eContents().get(0);
		
		//VerticalLayoutCellStyle returns ext::YVerticalLayoutCellStyle:
		//	"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment;
		public ParserRule getRule() { return rule; }

		//"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment
		public Alternatives getAlternatives() { return cAlternatives; }

		//"target" target=[core::YEmbeddable]
		public Group getGroup_0() { return cGroup_0; }

		//"target"
		public Keyword getTargetKeyword_0_0() { return cTargetKeyword_0_0; }

		//target=[core::YEmbeddable]
		public Assignment getTargetAssignment_0_1() { return cTargetAssignment_0_1; }

		//[core::YEmbeddable]
		public CrossReference getTargetYEmbeddableCrossReference_0_1_0() { return cTargetYEmbeddableCrossReference_0_1_0; }

		//ID
		public RuleCall getTargetYEmbeddableIDTerminalRuleCall_0_1_0_1() { return cTargetYEmbeddableIDTerminalRuleCall_0_1_0_1; }

		//"alignment" alignment=Alignment
		public Group getGroup_1() { return cGroup_1; }

		//"alignment"
		public Keyword getAlignmentKeyword_1_0() { return cAlignmentKeyword_1_0; }

		//alignment=Alignment
		public Assignment getAlignmentAssignment_1_1() { return cAlignmentAssignment_1_1; }

		//Alignment
		public RuleCall getAlignmentAlignmentEnumRuleCall_1_1_0() { return cAlignmentAlignmentEnumRuleCall_1_1_0; }
	}

	public class GridLayoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridLayout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGridlayoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cCellStylesAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cCellStylesGridLayoutCellStyleParserRuleCall_2_0_1_0 = (RuleCall)cCellStylesAssignment_2_0_1.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cColumnsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cColumnsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cColumnsINTTerminalRuleCall_2_1_1_0 = (RuleCall)cColumnsAssignment_2_1_1.eContents().get(0);
		private final Assignment cFillHorizontalAssignment_2_2 = (Assignment)cAlternatives_2.eContents().get(2);
		private final Keyword cFillHorizontalFillhorizontalKeyword_2_2_0 = (Keyword)cFillHorizontalAssignment_2_2.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cAlternatives_2.eContents().get(3);
		private final Assignment cFillVerticalAssignment_2_3_0 = (Assignment)cGroup_2_3.eContents().get(0);
		private final Keyword cFillVerticalFillverticalKeyword_2_3_0_0 = (Keyword)cFillVerticalAssignment_2_3_0.eContents().get(0);
		private final Assignment cElementsAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cElementsEmbeddableParserRuleCall_2_3_1_0 = (RuleCall)cElementsAssignment_2_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		
		//GridLayout returns ext::YGridLayout:
		//	"gridlayout" id=ID ("{" cellStyles+=GridLayoutCellStyle* | "columns" columns=INT | fillHorizontal?="fillhorizontal" |
		//	fillVertical?="fillvertical" elements+=Embeddable* "}");
		public ParserRule getRule() { return rule; }

		//"gridlayout" id=ID ("{" cellStyles+=GridLayoutCellStyle* | "columns" columns=INT | fillHorizontal?="fillhorizontal" |
		//fillVertical?="fillvertical" elements+=Embeddable* "}")
		public Group getGroup() { return cGroup; }

		//"gridlayout"
		public Keyword getGridlayoutKeyword_0() { return cGridlayoutKeyword_0; }

		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }

		//"{" cellStyles+=GridLayoutCellStyle* | "columns" columns=INT | fillHorizontal?="fillhorizontal" |
		//fillVertical?="fillvertical" elements+=Embeddable* "}"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"{" cellStyles+=GridLayoutCellStyle*
		public Group getGroup_2_0() { return cGroup_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2_0_0() { return cLeftCurlyBracketKeyword_2_0_0; }

		//cellStyles+=GridLayoutCellStyle*
		public Assignment getCellStylesAssignment_2_0_1() { return cCellStylesAssignment_2_0_1; }

		//GridLayoutCellStyle
		public RuleCall getCellStylesGridLayoutCellStyleParserRuleCall_2_0_1_0() { return cCellStylesGridLayoutCellStyleParserRuleCall_2_0_1_0; }

		//"columns" columns=INT
		public Group getGroup_2_1() { return cGroup_2_1; }

		//"columns"
		public Keyword getColumnsKeyword_2_1_0() { return cColumnsKeyword_2_1_0; }

		//columns=INT
		public Assignment getColumnsAssignment_2_1_1() { return cColumnsAssignment_2_1_1; }

		//INT
		public RuleCall getColumnsINTTerminalRuleCall_2_1_1_0() { return cColumnsINTTerminalRuleCall_2_1_1_0; }

		//fillHorizontal?="fillhorizontal"
		public Assignment getFillHorizontalAssignment_2_2() { return cFillHorizontalAssignment_2_2; }

		//"fillhorizontal"
		public Keyword getFillHorizontalFillhorizontalKeyword_2_2_0() { return cFillHorizontalFillhorizontalKeyword_2_2_0; }

		//fillVertical?="fillvertical" elements+=Embeddable* "}"
		public Group getGroup_2_3() { return cGroup_2_3; }

		//fillVertical?="fillvertical"
		public Assignment getFillVerticalAssignment_2_3_0() { return cFillVerticalAssignment_2_3_0; }

		//"fillvertical"
		public Keyword getFillVerticalFillverticalKeyword_2_3_0_0() { return cFillVerticalFillverticalKeyword_2_3_0_0; }

		//elements+=Embeddable*
		public Assignment getElementsAssignment_2_3_1() { return cElementsAssignment_2_3_1; }

		//Embeddable
		public RuleCall getElementsEmbeddableParserRuleCall_2_3_1_0() { return cElementsEmbeddableParserRuleCall_2_3_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2_3_2() { return cRightCurlyBracketKeyword_2_3_2; }
	}

	public class GridLayoutCellStyleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GridLayoutCellStyle");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cTargetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTargetAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cTargetYEmbeddableCrossReference_0_1_0 = (CrossReference)cTargetAssignment_0_1.eContents().get(0);
		private final RuleCall cTargetYEmbeddableIDTerminalRuleCall_0_1_0_1 = (RuleCall)cTargetYEmbeddableCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cAlignmentKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cAlignmentAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cAlignmentAlignmentEnumRuleCall_1_1_0 = (RuleCall)cAlignmentAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cSpaninfoKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSpanInfoAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSpanInfoSpanInfoParserRuleCall_2_1_0 = (RuleCall)cSpanInfoAssignment_2_1.eContents().get(0);
		
		//GridLayoutCellStyle returns ext::YGridLayoutCellStyle:
		//	"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment | "spaninfo" spanInfo=SpanInfo;
		public ParserRule getRule() { return rule; }

		//"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment | "spaninfo" spanInfo=SpanInfo
		public Alternatives getAlternatives() { return cAlternatives; }

		//"target" target=[core::YEmbeddable]
		public Group getGroup_0() { return cGroup_0; }

		//"target"
		public Keyword getTargetKeyword_0_0() { return cTargetKeyword_0_0; }

		//target=[core::YEmbeddable]
		public Assignment getTargetAssignment_0_1() { return cTargetAssignment_0_1; }

		//[core::YEmbeddable]
		public CrossReference getTargetYEmbeddableCrossReference_0_1_0() { return cTargetYEmbeddableCrossReference_0_1_0; }

		//ID
		public RuleCall getTargetYEmbeddableIDTerminalRuleCall_0_1_0_1() { return cTargetYEmbeddableIDTerminalRuleCall_0_1_0_1; }

		//"alignment" alignment=Alignment
		public Group getGroup_1() { return cGroup_1; }

		//"alignment"
		public Keyword getAlignmentKeyword_1_0() { return cAlignmentKeyword_1_0; }

		//alignment=Alignment
		public Assignment getAlignmentAssignment_1_1() { return cAlignmentAssignment_1_1; }

		//Alignment
		public RuleCall getAlignmentAlignmentEnumRuleCall_1_1_0() { return cAlignmentAlignmentEnumRuleCall_1_1_0; }

		//"spaninfo" spanInfo=SpanInfo
		public Group getGroup_2() { return cGroup_2; }

		//"spaninfo"
		public Keyword getSpaninfoKeyword_2_0() { return cSpaninfoKeyword_2_0; }

		//spanInfo=SpanInfo
		public Assignment getSpanInfoAssignment_2_1() { return cSpanInfoAssignment_2_1; }

		//SpanInfo
		public RuleCall getSpanInfoSpanInfoParserRuleCall_2_1_0() { return cSpanInfoSpanInfoParserRuleCall_2_1_0; }
	}

	public class SpanInfoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SpanInfo");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cGroup_0.eContents().get(0);
		private final Keyword cColumnFromKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cColumnFromAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cColumnFromINTTerminalRuleCall_0_0_1_0 = (RuleCall)cColumnFromAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cColumnToKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cColumnToAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cColumnToINTTerminalRuleCall_0_1_1_0 = (RuleCall)cColumnToAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cGroup_1.eContents().get(0);
		private final Keyword cRowFromKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cRowFromAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cRowFromINTTerminalRuleCall_1_0_1_0 = (RuleCall)cRowFromAssignment_1_0_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cRowToKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cRowToAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cRowToINTTerminalRuleCall_1_1_1_0 = (RuleCall)cRowToAssignment_1_1_1.eContents().get(0);
		
		//SpanInfo returns ext::YSpanInfo:
		//	("columnFrom" columnFrom=INT) ("columnTo" columnTo=INT) | ("rowFrom" rowFrom=INT) ("rowTo" rowTo=INT);
		public ParserRule getRule() { return rule; }

		//("columnFrom" columnFrom=INT) ("columnTo" columnTo=INT) | ("rowFrom" rowFrom=INT) ("rowTo" rowTo=INT)
		public Alternatives getAlternatives() { return cAlternatives; }

		//("columnFrom" columnFrom=INT) ("columnTo" columnTo=INT)
		public Group getGroup_0() { return cGroup_0; }

		//"columnFrom" columnFrom=INT
		public Group getGroup_0_0() { return cGroup_0_0; }

		//"columnFrom"
		public Keyword getColumnFromKeyword_0_0_0() { return cColumnFromKeyword_0_0_0; }

		//columnFrom=INT
		public Assignment getColumnFromAssignment_0_0_1() { return cColumnFromAssignment_0_0_1; }

		//INT
		public RuleCall getColumnFromINTTerminalRuleCall_0_0_1_0() { return cColumnFromINTTerminalRuleCall_0_0_1_0; }

		//"columnTo" columnTo=INT
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"columnTo"
		public Keyword getColumnToKeyword_0_1_0() { return cColumnToKeyword_0_1_0; }

		//columnTo=INT
		public Assignment getColumnToAssignment_0_1_1() { return cColumnToAssignment_0_1_1; }

		//INT
		public RuleCall getColumnToINTTerminalRuleCall_0_1_1_0() { return cColumnToINTTerminalRuleCall_0_1_1_0; }

		//("rowFrom" rowFrom=INT) ("rowTo" rowTo=INT)
		public Group getGroup_1() { return cGroup_1; }

		//"rowFrom" rowFrom=INT
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"rowFrom"
		public Keyword getRowFromKeyword_1_0_0() { return cRowFromKeyword_1_0_0; }

		//rowFrom=INT
		public Assignment getRowFromAssignment_1_0_1() { return cRowFromAssignment_1_0_1; }

		//INT
		public RuleCall getRowFromINTTerminalRuleCall_1_0_1_0() { return cRowFromINTTerminalRuleCall_1_0_1_0; }

		//"rowTo" rowTo=INT
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"rowTo"
		public Keyword getRowToKeyword_1_1_0() { return cRowToKeyword_1_1_0; }

		//rowTo=INT
		public Assignment getRowToAssignment_1_1_1() { return cRowToAssignment_1_1_1; }

		//INT
		public RuleCall getRowToINTTerminalRuleCall_1_1_1_0() { return cRowToINTTerminalRuleCall_1_1_1_0; }
	}

	public class TextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Text");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTextfieldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDatatypeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cDatatypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cDatatypeYTextDatatypeCrossReference_3_1_0 = (CrossReference)cDatatypeAssignment_3_1.eContents().get(0);
		private final RuleCall cDatatypeYTextDatatypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cDatatypeYTextDatatypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cDatadescriptionKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cDatadescriptionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cDatadescriptionYDatadescriptionCrossReference_4_1_0 = (CrossReference)cDatadescriptionAssignment_4_1.eContents().get(0);
		private final RuleCall cDatadescriptionYDatadescriptionIDTerminalRuleCall_4_1_0_1 = (RuleCall)cDatadescriptionYDatadescriptionCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cValueKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cValueAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_5_1_0 = (RuleCall)cValueAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Text returns ext::YTextField:
		//	"textfield" name=ID "{" ("datatype" datatype=[extDt::YTextDatatype])? ("datadescription"
		//	datadescription=[coreDt::YDatadescription])? ("value" value=ID)? "}";
		public ParserRule getRule() { return rule; }

		//"textfield" name=ID "{" ("datatype" datatype=[extDt::YTextDatatype])? ("datadescription"
		//datadescription=[coreDt::YDatadescription])? ("value" value=ID)? "}"
		public Group getGroup() { return cGroup; }

		//"textfield"
		public Keyword getTextfieldKeyword_0() { return cTextfieldKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("datatype" datatype=[extDt::YTextDatatype])?
		public Group getGroup_3() { return cGroup_3; }

		//"datatype"
		public Keyword getDatatypeKeyword_3_0() { return cDatatypeKeyword_3_0; }

		//datatype=[extDt::YTextDatatype]
		public Assignment getDatatypeAssignment_3_1() { return cDatatypeAssignment_3_1; }

		//[extDt::YTextDatatype]
		public CrossReference getDatatypeYTextDatatypeCrossReference_3_1_0() { return cDatatypeYTextDatatypeCrossReference_3_1_0; }

		//ID
		public RuleCall getDatatypeYTextDatatypeIDTerminalRuleCall_3_1_0_1() { return cDatatypeYTextDatatypeIDTerminalRuleCall_3_1_0_1; }

		//("datadescription" datadescription=[coreDt::YDatadescription])?
		public Group getGroup_4() { return cGroup_4; }

		//"datadescription"
		public Keyword getDatadescriptionKeyword_4_0() { return cDatadescriptionKeyword_4_0; }

		//datadescription=[coreDt::YDatadescription]
		public Assignment getDatadescriptionAssignment_4_1() { return cDatadescriptionAssignment_4_1; }

		//[coreDt::YDatadescription]
		public CrossReference getDatadescriptionYDatadescriptionCrossReference_4_1_0() { return cDatadescriptionYDatadescriptionCrossReference_4_1_0; }

		//ID
		public RuleCall getDatadescriptionYDatadescriptionIDTerminalRuleCall_4_1_0_1() { return cDatadescriptionYDatadescriptionIDTerminalRuleCall_4_1_0_1; }

		//("value" value=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//"value"
		public Keyword getValueKeyword_5_0() { return cValueKeyword_5_0; }

		//value=ID
		public Assignment getValueAssignment_5_1() { return cValueAssignment_5_1; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_5_1_0() { return cValueIDTerminalRuleCall_5_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Input");
		private final RuleCall cTextParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Input returns ext::YInput:
		//	Text;
		public ParserRule getRule() { return rule; }

		//Text
		public RuleCall getTextParserRuleCall() { return cTextParserRuleCall; }
	}

	public class EmbeddableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Embeddable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cLayoutParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFieldParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Embeddable returns core::YEmbeddable:
		//	Layout | Field;
		public ParserRule getRule() { return rule; }

		//Layout | Field
		public Alternatives getAlternatives() { return cAlternatives; }

		//Layout
		public RuleCall getLayoutParserRuleCall_0() { return cLayoutParserRuleCall_0; }

		//Field
		public RuleCall getFieldParserRuleCall_1() { return cFieldParserRuleCall_1; }
	}

	public class FieldElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Field");
		private final RuleCall cTextParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Field returns core::YField:
		//	Text;
		public ParserRule getRule() { return rule; }

		//Text
		public RuleCall getTextParserRuleCall() { return cTextParserRuleCall; }
	}

	public class ValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Validator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMaxLengthValidatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMinLengthValidatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Validator returns coreVal::YValidator:
		//	MaxLengthValidator | MinLengthValidator;
		public ParserRule getRule() { return rule; }

		//MaxLengthValidator | MinLengthValidator
		public Alternatives getAlternatives() { return cAlternatives; }

		//MaxLengthValidator
		public RuleCall getMaxLengthValidatorParserRuleCall_0() { return cMaxLengthValidatorParserRuleCall_0; }

		//MinLengthValidator
		public RuleCall getMinLengthValidatorParserRuleCall_1() { return cMinLengthValidatorParserRuleCall_1; }
	}

	public class MaxLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MaxLengthValidator");
		private final Keyword cMaxKeyword = (Keyword)rule.eContents().get(1);
		
		//MaxLengthValidator returns coreVal::YValidator:
		//	"max";
		public ParserRule getRule() { return rule; }

		//"max"
		public Keyword getMaxKeyword() { return cMaxKeyword; }
	}

	public class MinLengthValidatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MinLengthValidator");
		private final Keyword cMinKeyword = (Keyword)rule.eContents().get(1);
		
		//MinLengthValidator returns coreVal::YValidator:
		//	"min";
		public ParserRule getRule() { return rule; }

		//"min"
		public Keyword getMinKeyword() { return cMinKeyword; }
	}
	
	
	public class AlignmentElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Alignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBOTTOM_LEFTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBOTTOM_LEFTBOTTOM_LEFTKeyword_0_0 = (Keyword)cBOTTOM_LEFTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBOTTOM_CENTEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBOTTOM_CENTERBOTTOM_CENTERKeyword_1_0 = (Keyword)cBOTTOM_CENTEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBOTTOM_RIGHTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBOTTOM_RIGHTBOTTOM_RIGHTKeyword_2_0 = (Keyword)cBOTTOM_RIGHTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBOTTOM_FILLEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBOTTOM_FILLBOTTOM_FILLKeyword_3_0 = (Keyword)cBOTTOM_FILLEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMIDDLE_LEFTEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMIDDLE_LEFTMIDDLE_LEFTKeyword_4_0 = (Keyword)cMIDDLE_LEFTEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cMIDDLE_CENTEREnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cMIDDLE_CENTERMIDDLE_CENTERKeyword_5_0 = (Keyword)cMIDDLE_CENTEREnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cMIDDLE_RIGHTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cMIDDLE_RIGHTMIDDLE_RIGHTKeyword_6_0 = (Keyword)cMIDDLE_RIGHTEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cBOTTOM_FILLEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cBOTTOM_FILLMIDDLE_FILLKeyword_7_0 = (Keyword)cBOTTOM_FILLEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cTOP_LEFTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cTOP_LEFTTOP_LEFTKeyword_8_0 = (Keyword)cTOP_LEFTEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cTOP_CENTEREnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cTOP_CENTERTOP_CENTERKeyword_9_0 = (Keyword)cTOP_CENTEREnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cTOP_RIGHTEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cTOP_RIGHTTOP_RIGHTKeyword_10_0 = (Keyword)cTOP_RIGHTEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cTOP_FILLEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cTOP_FILLTOP_FILLKeyword_11_0 = (Keyword)cTOP_FILLEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cFILL_LEFTEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cFILL_LEFTFILL_LEFTKeyword_12_0 = (Keyword)cFILL_LEFTEnumLiteralDeclaration_12.eContents().get(0);
		private final EnumLiteralDeclaration cFILL_CENTEREnumLiteralDeclaration_13 = (EnumLiteralDeclaration)cAlternatives.eContents().get(13);
		private final Keyword cFILL_CENTERFILL_CENTERKeyword_13_0 = (Keyword)cFILL_CENTEREnumLiteralDeclaration_13.eContents().get(0);
		private final EnumLiteralDeclaration cFILL_RIGHTEnumLiteralDeclaration_14 = (EnumLiteralDeclaration)cAlternatives.eContents().get(14);
		private final Keyword cFILL_RIGHTFILL_RIGHTKeyword_14_0 = (Keyword)cFILL_RIGHTEnumLiteralDeclaration_14.eContents().get(0);
		private final EnumLiteralDeclaration cFILL_FILLEnumLiteralDeclaration_15 = (EnumLiteralDeclaration)cAlternatives.eContents().get(15);
		private final Keyword cFILL_FILLFILL_FILLKeyword_15_0 = (Keyword)cFILL_FILLEnumLiteralDeclaration_15.eContents().get(0);
		private final EnumLiteralDeclaration cUNDEFINEDEnumLiteralDeclaration_16 = (EnumLiteralDeclaration)cAlternatives.eContents().get(16);
		private final Keyword cUNDEFINEDUNDEFINEDKeyword_16_0 = (Keyword)cUNDEFINEDEnumLiteralDeclaration_16.eContents().get(0);
		
		//enum Alignment returns ext::YAlignment:
		//	BOTTOM_LEFT | BOTTOM_CENTER | BOTTOM_RIGHT | BOTTOM_FILL | MIDDLE_LEFT | MIDDLE_CENTER | MIDDLE_RIGHT |
		//	BOTTOM_FILL="MIDDLE_FILL" | TOP_LEFT | TOP_CENTER | TOP_RIGHT | TOP_FILL | FILL_LEFT | FILL_CENTER | FILL_RIGHT |
		//	FILL_FILL | UNDEFINED;
		public EnumRule getRule() { return rule; }

		//BOTTOM_LEFT | BOTTOM_CENTER | BOTTOM_RIGHT | BOTTOM_FILL | MIDDLE_LEFT | MIDDLE_CENTER | MIDDLE_RIGHT |
		//BOTTOM_FILL="MIDDLE_FILL" | TOP_LEFT | TOP_CENTER | TOP_RIGHT | TOP_FILL | FILL_LEFT | FILL_CENTER | FILL_RIGHT |
		//FILL_FILL | UNDEFINED
		public Alternatives getAlternatives() { return cAlternatives; }

		//BOTTOM_LEFT
		public EnumLiteralDeclaration getBOTTOM_LEFTEnumLiteralDeclaration_0() { return cBOTTOM_LEFTEnumLiteralDeclaration_0; }

		//"BOTTOM_LEFT"
		public Keyword getBOTTOM_LEFTBOTTOM_LEFTKeyword_0_0() { return cBOTTOM_LEFTBOTTOM_LEFTKeyword_0_0; }

		//BOTTOM_CENTER
		public EnumLiteralDeclaration getBOTTOM_CENTEREnumLiteralDeclaration_1() { return cBOTTOM_CENTEREnumLiteralDeclaration_1; }

		//"BOTTOM_CENTER"
		public Keyword getBOTTOM_CENTERBOTTOM_CENTERKeyword_1_0() { return cBOTTOM_CENTERBOTTOM_CENTERKeyword_1_0; }

		//BOTTOM_RIGHT
		public EnumLiteralDeclaration getBOTTOM_RIGHTEnumLiteralDeclaration_2() { return cBOTTOM_RIGHTEnumLiteralDeclaration_2; }

		//"BOTTOM_RIGHT"
		public Keyword getBOTTOM_RIGHTBOTTOM_RIGHTKeyword_2_0() { return cBOTTOM_RIGHTBOTTOM_RIGHTKeyword_2_0; }

		//BOTTOM_FILL
		public EnumLiteralDeclaration getBOTTOM_FILLEnumLiteralDeclaration_3() { return cBOTTOM_FILLEnumLiteralDeclaration_3; }

		//"BOTTOM_FILL"
		public Keyword getBOTTOM_FILLBOTTOM_FILLKeyword_3_0() { return cBOTTOM_FILLBOTTOM_FILLKeyword_3_0; }

		//MIDDLE_LEFT
		public EnumLiteralDeclaration getMIDDLE_LEFTEnumLiteralDeclaration_4() { return cMIDDLE_LEFTEnumLiteralDeclaration_4; }

		//"MIDDLE_LEFT"
		public Keyword getMIDDLE_LEFTMIDDLE_LEFTKeyword_4_0() { return cMIDDLE_LEFTMIDDLE_LEFTKeyword_4_0; }

		//MIDDLE_CENTER
		public EnumLiteralDeclaration getMIDDLE_CENTEREnumLiteralDeclaration_5() { return cMIDDLE_CENTEREnumLiteralDeclaration_5; }

		//"MIDDLE_CENTER"
		public Keyword getMIDDLE_CENTERMIDDLE_CENTERKeyword_5_0() { return cMIDDLE_CENTERMIDDLE_CENTERKeyword_5_0; }

		//MIDDLE_RIGHT
		public EnumLiteralDeclaration getMIDDLE_RIGHTEnumLiteralDeclaration_6() { return cMIDDLE_RIGHTEnumLiteralDeclaration_6; }

		//"MIDDLE_RIGHT"
		public Keyword getMIDDLE_RIGHTMIDDLE_RIGHTKeyword_6_0() { return cMIDDLE_RIGHTMIDDLE_RIGHTKeyword_6_0; }

		//BOTTOM_FILL="MIDDLE_FILL"
		public EnumLiteralDeclaration getBOTTOM_FILLEnumLiteralDeclaration_7() { return cBOTTOM_FILLEnumLiteralDeclaration_7; }

		//"MIDDLE_FILL"
		public Keyword getBOTTOM_FILLMIDDLE_FILLKeyword_7_0() { return cBOTTOM_FILLMIDDLE_FILLKeyword_7_0; }

		//TOP_LEFT
		public EnumLiteralDeclaration getTOP_LEFTEnumLiteralDeclaration_8() { return cTOP_LEFTEnumLiteralDeclaration_8; }

		//"TOP_LEFT"
		public Keyword getTOP_LEFTTOP_LEFTKeyword_8_0() { return cTOP_LEFTTOP_LEFTKeyword_8_0; }

		//TOP_CENTER
		public EnumLiteralDeclaration getTOP_CENTEREnumLiteralDeclaration_9() { return cTOP_CENTEREnumLiteralDeclaration_9; }

		//"TOP_CENTER"
		public Keyword getTOP_CENTERTOP_CENTERKeyword_9_0() { return cTOP_CENTERTOP_CENTERKeyword_9_0; }

		//TOP_RIGHT
		public EnumLiteralDeclaration getTOP_RIGHTEnumLiteralDeclaration_10() { return cTOP_RIGHTEnumLiteralDeclaration_10; }

		//"TOP_RIGHT"
		public Keyword getTOP_RIGHTTOP_RIGHTKeyword_10_0() { return cTOP_RIGHTTOP_RIGHTKeyword_10_0; }

		//TOP_FILL
		public EnumLiteralDeclaration getTOP_FILLEnumLiteralDeclaration_11() { return cTOP_FILLEnumLiteralDeclaration_11; }

		//"TOP_FILL"
		public Keyword getTOP_FILLTOP_FILLKeyword_11_0() { return cTOP_FILLTOP_FILLKeyword_11_0; }

		//FILL_LEFT
		public EnumLiteralDeclaration getFILL_LEFTEnumLiteralDeclaration_12() { return cFILL_LEFTEnumLiteralDeclaration_12; }

		//"FILL_LEFT"
		public Keyword getFILL_LEFTFILL_LEFTKeyword_12_0() { return cFILL_LEFTFILL_LEFTKeyword_12_0; }

		//FILL_CENTER
		public EnumLiteralDeclaration getFILL_CENTEREnumLiteralDeclaration_13() { return cFILL_CENTEREnumLiteralDeclaration_13; }

		//"FILL_CENTER"
		public Keyword getFILL_CENTERFILL_CENTERKeyword_13_0() { return cFILL_CENTERFILL_CENTERKeyword_13_0; }

		//FILL_RIGHT
		public EnumLiteralDeclaration getFILL_RIGHTEnumLiteralDeclaration_14() { return cFILL_RIGHTEnumLiteralDeclaration_14; }

		//"FILL_RIGHT"
		public Keyword getFILL_RIGHTFILL_RIGHTKeyword_14_0() { return cFILL_RIGHTFILL_RIGHTKeyword_14_0; }

		//FILL_FILL
		public EnumLiteralDeclaration getFILL_FILLEnumLiteralDeclaration_15() { return cFILL_FILLEnumLiteralDeclaration_15; }

		//"FILL_FILL"
		public Keyword getFILL_FILLFILL_FILLKeyword_15_0() { return cFILL_FILLFILL_FILLKeyword_15_0; }

		//UNDEFINED
		public EnumLiteralDeclaration getUNDEFINEDEnumLiteralDeclaration_16() { return cUNDEFINEDEnumLiteralDeclaration_16; }

		//"UNDEFINED"
		public Keyword getUNDEFINEDUNDEFINEDKeyword_16_0() { return cUNDEFINEDUNDEFINEDKeyword_16_0; }
	}
	
	private UiModelElements pUiModel;
	private ViewSetElements pViewSet;
	private BeanSlotElements pBeanSlot;
	private GBeanSlotElements pGBeanSlot;
	private ViewElements pView;
	private IDEViewElements pIDEView;
	private ActionElements pAction;
	private LayoutElements pLayout;
	private HorizontalLayoutElements pHorizontalLayout;
	private HorizontalLayoutCellStyleElements pHorizontalLayoutCellStyle;
	private VerticalLayoutElements pVerticalLayout;
	private VerticalLayoutCellStyleElements pVerticalLayoutCellStyle;
	private GridLayoutElements pGridLayout;
	private GridLayoutCellStyleElements pGridLayoutCellStyle;
	private AlignmentElements unknownRuleAlignment;
	private SpanInfoElements pSpanInfo;
	private TextElements pText;
	private InputElements pInput;
	private EmbeddableElements pEmbeddable;
	private FieldElements pField;
	private ValidatorElements pValidator;
	private MaxLengthValidatorElements pMaxLengthValidator;
	private MinLengthValidatorElements pMinLengthValidator;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public UIGrammarGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.lunifera.ecview.dsl.UIGrammar".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//UiModel:
	//	viewSet+=ViewSet*;
	public UiModelElements getUiModelAccess() {
		return (pUiModel != null) ? pUiModel : (pUiModel = new UiModelElements());
	}
	
	public ParserRule getUiModelRule() {
		return getUiModelAccess().getRule();
	}

	//ViewSet returns core::YViewSet:
	//	{core::YViewSet} "viewset" name=ID ("{" ("beanslots" "{" beanSlots+=BeanSlot* "}")? views+=View* "}")?;
	public ViewSetElements getViewSetAccess() {
		return (pViewSet != null) ? pViewSet : (pViewSet = new ViewSetElements());
	}
	
	public ParserRule getViewSetRule() {
		return getViewSetAccess().getRule();
	}

	//BeanSlot returns core::YBeanSlot:
	//	GBeanSlot;
	public BeanSlotElements getBeanSlotAccess() {
		return (pBeanSlot != null) ? pBeanSlot : (pBeanSlot = new BeanSlotElements());
	}
	
	public ParserRule getBeanSlotRule() {
		return getBeanSlotAccess().getRule();
	}

	//GBeanSlot:
	//	"slot" name=ID ":" jvmType=JvmTypeReference;
	public GBeanSlotElements getGBeanSlotAccess() {
		return (pGBeanSlot != null) ? pGBeanSlot : (pGBeanSlot = new GBeanSlotElements());
	}
	
	public ParserRule getGBeanSlotRule() {
		return getGBeanSlotAccess().getRule();
	}

	//View returns core::YView:
	//	IDEView;
	public ViewElements getViewAccess() {
		return (pView != null) ? pView : (pView = new ViewElements());
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}

	//IDEView:
	//	"ideview" name=ID ("{" actions+=Action* layouts+=Layout* "}")?;
	public IDEViewElements getIDEViewAccess() {
		return (pIDEView != null) ? pIDEView : (pIDEView = new IDEViewElements());
	}
	
	public ParserRule getIDEViewRule() {
		return getIDEViewAccess().getRule();
	}

	//Action:
	//	"action" name=ID ("{" body=XExpression "}");
	public ActionElements getActionAccess() {
		return (pAction != null) ? pAction : (pAction = new ActionElements());
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Layout returns core::YLayout:
	//	HorizontalLayout | VerticalLayout | GridLayout;
	public LayoutElements getLayoutAccess() {
		return (pLayout != null) ? pLayout : (pLayout = new LayoutElements());
	}
	
	public ParserRule getLayoutRule() {
		return getLayoutAccess().getRule();
	}

	//HorizontalLayout returns ext::YHorizontalLayout:
	//	"horizontal layout" id=ID ("{" cellStyles+=HorizontalLayoutCellStyle* | fillHorizontal?="fillhorizontal" "}");
	public HorizontalLayoutElements getHorizontalLayoutAccess() {
		return (pHorizontalLayout != null) ? pHorizontalLayout : (pHorizontalLayout = new HorizontalLayoutElements());
	}
	
	public ParserRule getHorizontalLayoutRule() {
		return getHorizontalLayoutAccess().getRule();
	}

	//HorizontalLayoutCellStyle returns ext::YHorizontalLayoutCellStyle:
	//	"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment;
	public HorizontalLayoutCellStyleElements getHorizontalLayoutCellStyleAccess() {
		return (pHorizontalLayoutCellStyle != null) ? pHorizontalLayoutCellStyle : (pHorizontalLayoutCellStyle = new HorizontalLayoutCellStyleElements());
	}
	
	public ParserRule getHorizontalLayoutCellStyleRule() {
		return getHorizontalLayoutCellStyleAccess().getRule();
	}

	//VerticalLayout returns ext::YVerticalLayout:
	//	"vertical layout" id=ID ("{" cellStyles+=VerticalLayoutCellStyle* | fillVertical?="fillvertical" "}");
	public VerticalLayoutElements getVerticalLayoutAccess() {
		return (pVerticalLayout != null) ? pVerticalLayout : (pVerticalLayout = new VerticalLayoutElements());
	}
	
	public ParserRule getVerticalLayoutRule() {
		return getVerticalLayoutAccess().getRule();
	}

	//VerticalLayoutCellStyle returns ext::YVerticalLayoutCellStyle:
	//	"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment;
	public VerticalLayoutCellStyleElements getVerticalLayoutCellStyleAccess() {
		return (pVerticalLayoutCellStyle != null) ? pVerticalLayoutCellStyle : (pVerticalLayoutCellStyle = new VerticalLayoutCellStyleElements());
	}
	
	public ParserRule getVerticalLayoutCellStyleRule() {
		return getVerticalLayoutCellStyleAccess().getRule();
	}

	//GridLayout returns ext::YGridLayout:
	//	"gridlayout" id=ID ("{" cellStyles+=GridLayoutCellStyle* | "columns" columns=INT | fillHorizontal?="fillhorizontal" |
	//	fillVertical?="fillvertical" elements+=Embeddable* "}");
	public GridLayoutElements getGridLayoutAccess() {
		return (pGridLayout != null) ? pGridLayout : (pGridLayout = new GridLayoutElements());
	}
	
	public ParserRule getGridLayoutRule() {
		return getGridLayoutAccess().getRule();
	}

	//GridLayoutCellStyle returns ext::YGridLayoutCellStyle:
	//	"target" target=[core::YEmbeddable] | "alignment" alignment=Alignment | "spaninfo" spanInfo=SpanInfo;
	public GridLayoutCellStyleElements getGridLayoutCellStyleAccess() {
		return (pGridLayoutCellStyle != null) ? pGridLayoutCellStyle : (pGridLayoutCellStyle = new GridLayoutCellStyleElements());
	}
	
	public ParserRule getGridLayoutCellStyleRule() {
		return getGridLayoutCellStyleAccess().getRule();
	}

	//enum Alignment returns ext::YAlignment:
	//	BOTTOM_LEFT | BOTTOM_CENTER | BOTTOM_RIGHT | BOTTOM_FILL | MIDDLE_LEFT | MIDDLE_CENTER | MIDDLE_RIGHT |
	//	BOTTOM_FILL="MIDDLE_FILL" | TOP_LEFT | TOP_CENTER | TOP_RIGHT | TOP_FILL | FILL_LEFT | FILL_CENTER | FILL_RIGHT |
	//	FILL_FILL | UNDEFINED;
	public AlignmentElements getAlignmentAccess() {
		return (unknownRuleAlignment != null) ? unknownRuleAlignment : (unknownRuleAlignment = new AlignmentElements());
	}
	
	public EnumRule getAlignmentRule() {
		return getAlignmentAccess().getRule();
	}

	//SpanInfo returns ext::YSpanInfo:
	//	("columnFrom" columnFrom=INT) ("columnTo" columnTo=INT) | ("rowFrom" rowFrom=INT) ("rowTo" rowTo=INT);
	public SpanInfoElements getSpanInfoAccess() {
		return (pSpanInfo != null) ? pSpanInfo : (pSpanInfo = new SpanInfoElements());
	}
	
	public ParserRule getSpanInfoRule() {
		return getSpanInfoAccess().getRule();
	}

	//Text returns ext::YTextField:
	//	"textfield" name=ID "{" ("datatype" datatype=[extDt::YTextDatatype])? ("datadescription"
	//	datadescription=[coreDt::YDatadescription])? ("value" value=ID)? "}";
	public TextElements getTextAccess() {
		return (pText != null) ? pText : (pText = new TextElements());
	}
	
	public ParserRule getTextRule() {
		return getTextAccess().getRule();
	}

	//Input returns ext::YInput:
	//	Text;
	public InputElements getInputAccess() {
		return (pInput != null) ? pInput : (pInput = new InputElements());
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}

	//Embeddable returns core::YEmbeddable:
	//	Layout | Field;
	public EmbeddableElements getEmbeddableAccess() {
		return (pEmbeddable != null) ? pEmbeddable : (pEmbeddable = new EmbeddableElements());
	}
	
	public ParserRule getEmbeddableRule() {
		return getEmbeddableAccess().getRule();
	}

	//Field returns core::YField:
	//	Text;
	public FieldElements getFieldAccess() {
		return (pField != null) ? pField : (pField = new FieldElements());
	}
	
	public ParserRule getFieldRule() {
		return getFieldAccess().getRule();
	}

	//Validator returns coreVal::YValidator:
	//	MaxLengthValidator | MinLengthValidator;
	public ValidatorElements getValidatorAccess() {
		return (pValidator != null) ? pValidator : (pValidator = new ValidatorElements());
	}
	
	public ParserRule getValidatorRule() {
		return getValidatorAccess().getRule();
	}

	//MaxLengthValidator returns coreVal::YValidator:
	//	"max";
	public MaxLengthValidatorElements getMaxLengthValidatorAccess() {
		return (pMaxLengthValidator != null) ? pMaxLengthValidator : (pMaxLengthValidator = new MaxLengthValidatorElements());
	}
	
	public ParserRule getMaxLengthValidatorRule() {
		return getMaxLengthValidatorAccess().getRule();
	}

	//MinLengthValidator returns coreVal::YValidator:
	//	"min";
	public MinLengthValidatorElements getMinLengthValidatorAccess() {
		return (pMinLengthValidator != null) ? pMinLengthValidator : (pMinLengthValidator = new MinLengthValidatorElements());
	}
	
	public ParserRule getMinLengthValidatorRule() {
		return getMinLengthValidatorAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign value=XAssignment | XOrExpression
	//	(=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMultiAssign])
	//	rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=" | "-=" | "*=" | "/=" | "%=" | "<" "<" "=" | ">" ">"? ">=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=" | "===" | "!==";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<" "=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..<" | ">" ".." | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<" | "=>") | "<>" | "?:";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XUnaryOperation | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XPostfixOperation (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XPostfixOperation returns XExpression:
	//	XMemberFeatureCall => ({XPostfixOperation.operand=current} feature=[types::JvmIdentifiableElement|OpPostfix])?;
	public XbaseGrammarAccess.XPostfixOperationElements getXPostfixOperationAccess() {
		return gaXbase.getXPostfixOperationAccess();
	}
	
	public ParserRule getXPostfixOperationRule() {
		return getXPostfixOperationAccess().getRule();
	}

	//OpPostfix:
	//	"++" | "--";
	public XbaseGrammarAccess.OpPostfixElements getOpPostfixAccess() {
		return gaXbase.getOpPostfixAccess();
	}
	
	public ParserRule getOpPostfixRule() {
		return getOpPostfixAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} ("." | explicitStatic?="::")
	//	feature=[types::JvmIdentifiableElement|FeatureCallID] OpSingleAssign) value=XAssignment | =>
	//	({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." | explicitStatic?="::")) ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XSynchronizedExpression | XFeatureCall | XLiteral |
	//	XIfExpression | XForLoopExpression | XBasicForLoopExpression | XWhileExpression | XDoWhileExpression |
	//	XThrowExpression | XReturnExpression | XTryCatchFinallyExpression | XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XCollectionLiteral | XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XCollectionLiteral:
	//	XSetLiteral | XListLiteral;
	public XbaseGrammarAccess.XCollectionLiteralElements getXCollectionLiteralAccess() {
		return gaXbase.getXCollectionLiteralAccess();
	}
	
	public ParserRule getXCollectionLiteralRule() {
		return getXCollectionLiteralAccess().getRule();
	}

	//XSetLiteral:
	//	{XSetLiteral} "#" "{" (elements+=XExpression ("," elements+=XExpression)*)? "}";
	public XbaseGrammarAccess.XSetLiteralElements getXSetLiteralAccess() {
		return gaXbase.getXSetLiteralAccess();
	}
	
	public ParserRule getXSetLiteralRule() {
		return getXSetLiteralAccess().getRule();
	}

	//XListLiteral:
	//	{XListLiteral} "#" "[" (elements+=XExpression ("," elements+=XExpression)*)? "]";
	public XbaseGrammarAccess.XListLiteralElements getXListLiteralAccess() {
		return gaXbase.getXListLiteralAccess();
	}
	
	public ParserRule getXListLiteralRule() {
		return getXListLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionOrVarDeclaration ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> ("(" declaredParam=JvmFormalParameter ":") switch=XExpression ")" | =>
	//	(declaredParam=JvmFormalParameter ":")? switch=XExpression) "{" cases+=XCasePart* ("default" ":" default=XExpression)?
	//	"}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	{XCasePart} typeGuard=JvmTypeReference? ("case" case=XExpression)? (":" then=XExpression | ",");
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	=> ({XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":") forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XBasicForLoopExpression returns XExpression:
	//	{XBasicForLoopExpression} "for" "(" (initExpressions+=XExpressionOrVarDeclaration (","
	//	initExpressions+=XExpressionOrVarDeclaration)*)? ";" expression=XExpression? ";" (updateExpressions+=XExpression (","
	//	updateExpressions+=XExpression)*)? ")" eachExpression=XExpression;
	public XbaseGrammarAccess.XBasicForLoopExpressionElements getXBasicForLoopExpressionAccess() {
		return gaXbase.getXBasicForLoopExpressionAccess();
	}
	
	public ParserRule getXBasicForLoopExpressionRule() {
		return getXBasicForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionOrVarDeclaration ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionOrVarDeclaration returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionOrVarDeclarationElements getXExpressionOrVarDeclarationAccess() {
		return gaXbase.getXExpressionOrVarDeclarationAccess();
	}
	
	public ParserRule getXExpressionOrVarDeclarationRule() {
		return getXExpressionOrVarDeclarationAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|IdOrSuper] (=> explicitOperationCall?="(" (featureCallArguments+=XShortClosure
	//	| featureCallArguments+=XExpression ("," featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//FeatureCallID:
	//	ValidID | "extends" | "static" | "import" | "extension";
	public XbaseGrammarAccess.FeatureCallIDElements getFeatureCallIDAccess() {
		return gaXbase.getFeatureCallIDAccess();
	}
	
	public ParserRule getFeatureCallIDRule() {
		return getFeatureCallIDAccess().getRule();
	}

	//IdOrSuper:
	//	FeatureCallID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? (=>
	//	explicitConstructorCall?="(" (arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")?
	//	arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] arrayDimensions+=ArrayBrackets* ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" -> expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XSynchronizedExpression returns XExpression:
	//	=> ({XSynchronizedExpression} "synchronized" "(") param=XExpression ")" expression=XExpression;
	public XbaseGrammarAccess.XSynchronizedExpressionElements getXSynchronizedExpressionAccess() {
		return gaXbase.getXSynchronizedExpressionAccess();
	}
	
	public ParserRule getXSynchronizedExpressionRule() {
		return getXSynchronizedExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	/// **
	// * Dummy rule, for "better" downwards compatibility, since GrammarAccess generates non-static inner classes, 
	// * which makes downstream grammars break on classloading, when a rule is removed.
	// * / StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9" ("0".."9" | "_")*;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} ArrayBrackets)* |
	//	XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//ArrayBrackets:
	//	"[" "]";
	public XtypeGrammarAccess.ArrayBracketsElements getArrayBracketsAccess() {
		return gaXbase.getArrayBracketsAccess();
	}
	
	public ParserRule getArrayBracketsRule() {
		return getArrayBracketsAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded*)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName "." "*";
	public XtypeGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaXbase.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//XImportSection:
	//	importDeclarations+=XImportDeclaration+;
	public XtypeGrammarAccess.XImportSectionElements getXImportSectionAccess() {
		return gaXbase.getXImportSectionAccess();
	}
	
	public ParserRule getXImportSectionRule() {
		return getXImportSectionAccess().getRule();
	}

	//XImportDeclaration:
	//	"import" (static?="static" extension?="extension"? importedType=[JvmDeclaredType|QualifiedNameInStaticImport]
	//	(wildcard?="*" | memberName=ValidID) | importedType=[JvmDeclaredType|QualifiedName] |
	//	importedNamespace=QualifiedNameWithWildcard) ";"?;
	public XtypeGrammarAccess.XImportDeclarationElements getXImportDeclarationAccess() {
		return gaXbase.getXImportDeclarationAccess();
	}
	
	public ParserRule getXImportDeclarationRule() {
		return getXImportDeclarationAccess().getRule();
	}

	//QualifiedNameInStaticImport:
	//	(ValidID ".")+;
	public XtypeGrammarAccess.QualifiedNameInStaticImportElements getQualifiedNameInStaticImportAccess() {
		return gaXbase.getQualifiedNameInStaticImportAccess();
	}
	
	public ParserRule getQualifiedNameInStaticImportRule() {
		return getQualifiedNameInStaticImportAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
